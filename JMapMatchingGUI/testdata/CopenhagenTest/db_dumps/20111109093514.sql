/*
 Navicat PostgreSQL Backup

 Source Server         : localhost
 Source Server Version : 90004
 Source Host           : localhost
 Source Database       : bikeability
 Source Schema         : public

 Target Server Version : 90004
 File Encoding         : utf-8

 Date: 11/09/2011 09:35:14 AM
*/

-- ----------------------------
--  Sequence structure for "hibernate_sequence"
-- ----------------------------
DROP SEQUENCE IF EXISTS "hibernate_sequence" CASCADE;
CREATE SEQUENCE "hibernate_sequence" INCREMENT 1 START 279610 MAXVALUE 9223372036854775807 MINVALUE 1 CACHE 1;
ALTER TABLE "hibernate_sequence" OWNER TO "biker";

-- ----------------------------
--  Sequence structure for "point_gid_sequence"
-- ----------------------------
DROP SEQUENCE IF EXISTS "point_gid_sequence" CASCADE;
CREATE SEQUENCE "point_gid_sequence" INCREMENT 1 START 783 MAXVALUE 9223372036854775807 MINVALUE 1 CACHE 1;
ALTER TABLE "point_gid_sequence" OWNER TO "postgres";

-- ----------------------------
--  Sequence structure for "poly_gid_sequence"
-- ----------------------------
DROP SEQUENCE IF EXISTS "poly_gid_sequence" CASCADE;
CREATE SEQUENCE "poly_gid_sequence" INCREMENT 1 START 1 MAXVALUE 9223372036854775807 MINVALUE 1 CACHE 1;
ALTER TABLE "poly_gid_sequence" OWNER TO "postgres";

-- ----------------------------
--  Table structure for "bicycletype"
-- ----------------------------
DROP TABLE IF EXISTS "bicycletype" CASCADE;
CREATE TABLE "bicycletype" (
	"id" int2 NOT NULL,
	"descr" varchar(255)
)
WITH (OIDS=FALSE);
ALTER TABLE "bicycletype" OWNER TO "biker";

-- ----------------------------
--  Table structure for "cyclewaytype"
-- ----------------------------
DROP TABLE IF EXISTS "cyclewaytype" CASCADE;
CREATE TABLE "cyclewaytype" (
	"id" int2 NOT NULL,
	"descr" varchar(255)
)
WITH (OIDS=FALSE);
ALTER TABLE "cyclewaytype" OWNER TO "biker";

-- ----------------------------
--  Table structure for "foottype"
-- ----------------------------
DROP TABLE IF EXISTS "foottype" CASCADE;
CREATE TABLE "foottype" (
	"id" int2 NOT NULL,
	"descr" varchar(255)
)
WITH (OIDS=FALSE);
ALTER TABLE "foottype" OWNER TO "biker";

-- ----------------------------
--  Table structure for "highwaytype"
-- ----------------------------
DROP TABLE IF EXISTS "highwaytype" CASCADE;
CREATE TABLE "highwaytype" (
	"id" int2 NOT NULL,
	"descr" varchar(255)
)
WITH (OIDS=FALSE);
ALTER TABLE "highwaytype" OWNER TO "biker";

-- ----------------------------
--  Table structure for "osmedge"
-- ----------------------------
DROP TABLE IF EXISTS "osmedge" CASCADE;
CREATE TABLE "osmedge" (
	"id" int4 NOT NULL,
	"geom" "geometry",
	"fromnode" int4,
	"tonode" int4,
	"length" float4,
	"roadname" varchar(255),
	"highwaytype" int2,
	"cyclewaytype" int2,
	"bicycletype" int2,
	"foottype" int2,
	"segregatedtype" int2,
	"envtype" int2,
	"cyktype" int2,
	"groenpct" float4,
	"groenm" float4
)
WITH (OIDS=FALSE);
ALTER TABLE "osmedge" OWNER TO "biker";

-- ----------------------------
--  Records of "osmedge"
-- ----------------------------
BEGIN;
INSERT INTO "osmedge" VALUES ('1', '010200002000000000020000003826140E0F1E26411428659E778F57413426140E0F1E26411628659EF48F5741', '32', '31', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('2', '010200002000000000020000003227140E870A26411728659EFA8E57413227140E870A26411528659E778F5741', '2', '3', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('3', '010200002000000000020000000027140E6F0E26411728659E838D5741FE26140E6F0E26411828659E008E5741', '12', '11', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('4', '01020000200000000002000000D026140E571226411628659EFA8E57419B26140E3F1626411528659EFA8E5741', '15', '21', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('5', '010200002000000000020000009B26140E3F1626411528659EFA8E57419726140E3F1626411628659E778F5741', '21', '20', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('6', '010200002000000000020000003D26140E0F1E26411828659E008E57413C26140E0F1E26411828659E7D8E5741', '35', '34', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('7', '01020000200000000002000000F926140E6F0E26411528659EFA8E5741D026140E571226411628659EFA8E5741', '9', '15', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('8', '010200002000000000020000000027140E6F0E26411728659E838D5741DA26140E571226411828659E838D5741', '12', '18', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('9', '01020000200000000002000000F826140E6F0E26411528659E778F5741CF26140E571226411528659E778F5741', '8', '14', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('10', '010200002000000000020000007026140E271A26411528659E778F57413826140E0F1E26411428659E778F5741', '27', '32', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('11', '010200002000000000020000003727140E870A26411928659E008E57413427140E870A26411928659E7D8E5741', '5', '4', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('12', '010200002000000000020000003227140E870A26411728659EFA8E5741F926140E6F0E26411528659EFA8E5741', '2', '9', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('13', '010200002000000000020000003827140E870A26411828659E838D57413727140E870A26411928659E008E5741', '6', '5', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('14', '01020000200000000002000000CF26140E571226411528659E778F5741CC26140E571226411828659EF48F5741', '14', '13', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('15', '01020000200000000002000000D626140E571226411828659E008E5741D426140E571226411728659E7D8E5741', '17', '16', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('16', '010200002000000000020000007826140E271A26411628659E838D57414026140E0F1E26411728659E838D5741', '30', '36', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('17', '01020000200000000002000000F826140E6F0E26411528659E778F5741F526140E6F0E26411728659EF48F5741', '8', '7', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('18', '010200002000000000020000009C26140E3F1626411828659E7D8E57419B26140E3F1626411528659EFA8E5741', '22', '21', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('19', '010200002000000000020000007026140E271A26411528659E778F57416D26140E271A26411728659EF48F5741', '27', '25', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('20', '01020000200000000002000000D026140E571226411628659EFA8E5741CF26140E571226411528659E778F5741', '15', '14', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('21', '01020000200000000002000000FE26140E6F0E26411828659E008E5741FD26140E6F0E26411928659E7D8E5741', '11', '10', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('22', '010200002000000000020000006D26140E271A26411728659EF48F57413426140E0F1E26411628659EF48F5741', '25', '31', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('23', '01020000200000000002000000A026140E3F1626411728659E838D57419F26140E3F1626411828659E008E5741', '24', '23', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('24', '010200002000000000020000003727140E870A26411928659E008E5741FE26140E6F0E26411828659E008E5741', '5', '11', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('25', '010200002000000000020000007026140E271A26411528659EFA8E57417026140E271A26411528659E778F5741', '26', '27', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('26', '010200002000000000020000009C26140E3F1626411828659E7D8E57417226140E271A26411728659E7D8E5741', '22', '28', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('27', '01020000200000000002000000FE26140E6F0E26411828659E008E5741D626140E571226411828659E008E5741', '11', '17', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('28', '01020000200000000002000000CC26140E571226411828659EF48F57419426140E3F1626411728659EF48F5741', '13', '19', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('29', '010200002000000000020000007626140E271A26411728659E008E57417226140E271A26411728659E7D8E5741', '29', '28', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('30', '010200002000000000020000009726140E3F1626411628659E778F57417026140E271A26411528659E778F5741', '20', '27', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('31', '01020000200000000002000000CF26140E571226411528659E778F57419726140E3F1626411628659E778F5741', '14', '20', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('32', '010200002000000000020000003926140E0F1E26411528659EFA8E57413826140E0F1E26411428659E778F5741', '33', '32', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('33', '010200002000000000020000002E27140E870A26411828659EF48F5741F526140E6F0E26411728659EF48F5741', '1', '7', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('34', '010200002000000000020000007626140E271A26411728659E008E57413D26140E0F1E26411828659E008E5741', '29', '35', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('35', '010200002000000000020000007226140E271A26411728659E7D8E57417026140E271A26411528659EFA8E5741', '28', '26', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('36', '010200002000000000020000004026140E0F1E26411728659E838D57413D26140E0F1E26411828659E008E5741', '36', '35', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('37', '010200002000000000020000007226140E271A26411728659E7D8E57413C26140E0F1E26411828659E7D8E5741', '28', '34', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('38', '01020000200000000002000000FD26140E6F0E26411928659E7D8E5741F926140E6F0E26411528659EFA8E5741', '10', '9', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('39', '010200002000000000020000007826140E271A26411628659E838D57417626140E271A26411728659E008E5741', '30', '29', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('40', '010200002000000000020000003827140E870A26411828659E838D57410027140E6F0E26411728659E838D5741', '6', '12', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('41', '01020000200000000002000000DA26140E571226411828659E838D5741A026140E3F1626411728659E838D5741', '18', '24', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('42', '01020000200000000002000000D426140E571226411728659E7D8E5741D026140E571226411628659EFA8E5741', '16', '15', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('43', '010200002000000000020000003427140E870A26411928659E7D8E57413227140E870A26411728659EFA8E5741', '4', '2', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('44', '01020000200000000002000000A026140E3F1626411728659E838D57417826140E271A26411628659E838D5741', '24', '30', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('45', '010200002000000000020000009B26140E3F1626411528659EFA8E57417026140E271A26411528659EFA8E5741', '21', '26', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('46', '010200002000000000020000003227140E870A26411528659E778F5741F826140E6F0E26411528659E778F5741', '3', '8', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('47', '010200002000000000020000003227140E870A26411528659E778F57412E27140E870A26411828659EF48F5741', '3', '1', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('48', '010200002000000000020000009F26140E3F1626411828659E008E57417626140E271A26411728659E008E5741', '23', '29', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('49', '010200002000000000020000009426140E3F1626411728659EF48F57416D26140E271A26411728659EF48F5741', '19', '25', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('50', '01020000200000000002000000F926140E6F0E26411528659EFA8E5741F826140E6F0E26411528659E778F5741', '9', '8', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('51', '01020000200000000002000000D626140E571226411828659E008E57419F26140E3F1626411828659E008E5741', '17', '23', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('52', '01020000200000000002000000D426140E571226411728659E7D8E57419C26140E3F1626411828659E7D8E5741', '16', '22', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('53', '01020000200000000002000000FD26140E6F0E26411928659E7D8E5741D426140E571226411728659E7D8E5741', '10', '16', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('54', '01020000200000000002000000DA26140E571226411828659E838D5741D626140E571226411828659E008E5741', '18', '17', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('55', '010200002000000000020000003427140E870A26411928659E7D8E5741FD26140E6F0E26411928659E7D8E5741', '4', '10', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('56', '010200002000000000020000007026140E271A26411528659EFA8E57413926140E0F1E26411528659EFA8E5741', '26', '33', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('57', '010200002000000000020000009F26140E3F1626411828659E008E57419C26140E3F1626411828659E7D8E5741', '23', '22', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('58', '01020000200000000002000000F526140E6F0E26411728659EF48F5741CC26140E571226411828659EF48F5741', '7', '13', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('59', '010200002000000000020000009726140E3F1626411628659E778F57419426140E3F1626411728659EF48F5741', '20', '19', '500', null, null, null, null, null, null, '0', '0', '0', '0');
INSERT INTO "osmedge" VALUES ('60', '010200002000000000020000003C26140E0F1E26411828659E7D8E57413926140E0F1E26411528659EFA8E5741', '34', '33', '500', null, null, null, null, null, null, '0', '0', '0', '0');
COMMIT;

-- ----------------------------
--  Table structure for "osmnode"
-- ----------------------------
DROP TABLE IF EXISTS "osmnode" CASCADE;
CREATE TABLE "osmnode" (
	"id" int4 NOT NULL,
	"geom" "geometry"
)
WITH (OIDS=FALSE);
ALTER TABLE "osmnode" OWNER TO "biker";

-- ----------------------------
--  Records of "osmnode"
-- ----------------------------
BEGIN;
INSERT INTO "osmnode" VALUES ('1', '0101000020000000002E27140E870A26411828659EF48F5741');
INSERT INTO "osmnode" VALUES ('2', '0101000020000000003227140E870A26411728659EFA8E5741');
INSERT INTO "osmnode" VALUES ('3', '0101000020000000003227140E870A26411528659E778F5741');
INSERT INTO "osmnode" VALUES ('4', '0101000020000000003427140E870A26411928659E7D8E5741');
INSERT INTO "osmnode" VALUES ('5', '0101000020000000003727140E870A26411928659E008E5741');
INSERT INTO "osmnode" VALUES ('6', '0101000020000000003827140E870A26411828659E838D5741');
INSERT INTO "osmnode" VALUES ('7', '010100002000000000F526140E6F0E26411728659EF48F5741');
INSERT INTO "osmnode" VALUES ('8', '010100002000000000F826140E6F0E26411528659E778F5741');
INSERT INTO "osmnode" VALUES ('9', '010100002000000000F926140E6F0E26411528659EFA8E5741');
INSERT INTO "osmnode" VALUES ('10', '010100002000000000FD26140E6F0E26411928659E7D8E5741');
INSERT INTO "osmnode" VALUES ('11', '010100002000000000FE26140E6F0E26411828659E008E5741');
INSERT INTO "osmnode" VALUES ('12', '0101000020000000000027140E6F0E26411728659E838D5741');
INSERT INTO "osmnode" VALUES ('13', '010100002000000000CC26140E571226411828659EF48F5741');
INSERT INTO "osmnode" VALUES ('14', '010100002000000000CF26140E571226411528659E778F5741');
INSERT INTO "osmnode" VALUES ('15', '010100002000000000D026140E571226411628659EFA8E5741');
INSERT INTO "osmnode" VALUES ('16', '010100002000000000D426140E571226411728659E7D8E5741');
INSERT INTO "osmnode" VALUES ('17', '010100002000000000D626140E571226411828659E008E5741');
INSERT INTO "osmnode" VALUES ('18', '010100002000000000DA26140E571226411828659E838D5741');
INSERT INTO "osmnode" VALUES ('19', '0101000020000000009426140E3F1626411728659EF48F5741');
INSERT INTO "osmnode" VALUES ('20', '0101000020000000009726140E3F1626411628659E778F5741');
INSERT INTO "osmnode" VALUES ('21', '0101000020000000009B26140E3F1626411528659EFA8E5741');
INSERT INTO "osmnode" VALUES ('22', '0101000020000000009C26140E3F1626411828659E7D8E5741');
INSERT INTO "osmnode" VALUES ('23', '0101000020000000009F26140E3F1626411828659E008E5741');
INSERT INTO "osmnode" VALUES ('24', '010100002000000000A026140E3F1626411728659E838D5741');
INSERT INTO "osmnode" VALUES ('25', '0101000020000000006D26140E271A26411728659EF48F5741');
INSERT INTO "osmnode" VALUES ('26', '0101000020000000007026140E271A26411528659EFA8E5741');
INSERT INTO "osmnode" VALUES ('27', '0101000020000000007026140E271A26411528659E778F5741');
INSERT INTO "osmnode" VALUES ('28', '0101000020000000007226140E271A26411728659E7D8E5741');
INSERT INTO "osmnode" VALUES ('29', '0101000020000000007626140E271A26411728659E008E5741');
INSERT INTO "osmnode" VALUES ('30', '0101000020000000007826140E271A26411628659E838D5741');
INSERT INTO "osmnode" VALUES ('31', '0101000020000000003426140E0F1E26411628659EF48F5741');
INSERT INTO "osmnode" VALUES ('32', '0101000020000000003826140E0F1E26411428659E778F5741');
INSERT INTO "osmnode" VALUES ('33', '0101000020000000003926140E0F1E26411528659EFA8E5741');
INSERT INTO "osmnode" VALUES ('34', '0101000020000000003C26140E0F1E26411828659E7D8E5741');
INSERT INTO "osmnode" VALUES ('35', '0101000020000000003D26140E0F1E26411828659E008E5741');
INSERT INTO "osmnode" VALUES ('36', '0101000020000000004026140E0F1E26411728659E838D5741');
COMMIT;

-- ----------------------------
--  Table structure for "respondent"
-- ----------------------------
DROP TABLE IF EXISTS "respondent" CASCADE;
CREATE TABLE "respondent" (
	"id" int4 NOT NULL
)
WITH (OIDS=FALSE);
ALTER TABLE "respondent" OWNER TO "biker";

-- ----------------------------
--  Records of "respondent"
-- ----------------------------
BEGIN;
INSERT INTO "respondent" VALUES ('0');
COMMIT;

-- ----------------------------
--  Table structure for "resultmetadata"
-- ----------------------------
DROP TABLE IF EXISTS "resultmetadata" CASCADE;
CREATE TABLE "resultmetadata" (
	"id" int4 NOT NULL,
	"sourcerouteid" int4,
	"respondentid" int4,
	"tracklength" float4,
	"avgdistpt" float4,
	"mindistpt" float4,
	"maxdistpt" float4,
	"distpeavg" float4,
	"distpeavg05" float4,
	"distpeavg50" float4,
	"distpeavg95" float4,
	"npoints" int4,
	"nalternatives" int8,
	"maxdistancefactor" float4,
	"matchscore1" float4,
	"scoreavg05" float4,
	"scoreavg10" float4,
	"scoreavg25" float4,
	"scoreavg50" float4,
	"scoreavg100" float4,
	"matchlength1" float4,
	"matchlenavg05" float4,
	"matchlenavg10" float4,
	"matchlenavg25" float4,
	"matchlenavg50" float4,
	"matchlenavg100" float4,
	"nomatchedges1" float4,
	"nomatchedgeavg05" float4,
	"nomatchedgeavg10" float4,
	"nomatchedgeavg25" float4,
	"nomatchedgeavg50" float4,
	"nomatchedgeavg100" float4
)
WITH (OIDS=FALSE);
ALTER TABLE "resultmetadata" OWNER TO "biker";

-- ----------------------------
--  Table structure for "resultnodechoice"
-- ----------------------------
DROP TABLE IF EXISTS "resultnodechoice" CASCADE;
CREATE TABLE "resultnodechoice" (
	"id" int4 NOT NULL,
	"routeid" int4,
	"sourcerouteid" int4,
	"respondentid" int4,
	"i" int4,
	"nodeid" int4,
	"edgeid" int4,
	"selected" bool,
	"dist" float4,
	"angle" float4,
	"angletodest" float4,
	"envtype" int2,
	"cyktype" int2
)
WITH (OIDS=FALSE);
ALTER TABLE "resultnodechoice" OWNER TO "biker";

-- ----------------------------
--  Records of "resultnodechoice"
-- ----------------------------
BEGIN;
INSERT INTO "resultnodechoice" VALUES ('279592', '279591', '0', '0', '0', '0', '13', 't', '0', '0', '45', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279593', '279591', '0', '0', '1', '0', '24', 't', '0', '-90', '-38.6598', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279594', '279591', '0', '0', '1', '0', '13', 'f', '0', '-180', '-128.66', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279595', '279591', '0', '0', '2', '0', '21', 't', '0.1', '90', '45', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279596', '279591', '0', '0', '2', '0', '24', 'f', '0.1', '180', '135', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279597', '279591', '0', '0', '3', '0', '53', 't', '0.2', '-90', '-36.8699', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279598', '279591', '0', '0', '3', '0', '21', 'f', '0.2', '-180', '-126.87', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279599', '279591', '0', '0', '4', '0', '52', 't', '0.3', '0', '-45', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279600', '279591', '0', '0', '4', '0', '53', 'f', '0.3', '180', '135', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279601', '279591', '0', '0', '5', '0', '18', 't', '0.4', '90', '33.6901', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279602', '279591', '0', '0', '5', '0', '52', 'f', '0.4', '180', '123.69', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279603', '279591', '0', '0', '6', '0', '5', 't', '0.5', '0', '45', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279604', '279591', '0', '0', '6', '0', '18', 'f', '0.5', '-180', '-135', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279605', '279591', '0', '0', '7', '0', '30', 't', '0.6', '-90', '-26.5651', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279606', '279591', '0', '0', '7', '0', '5', 'f', '0.6', '-180', '-116.565', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279607', '279591', '0', '0', '8', '0', '10', 't', '0.7', '0', '-45', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279608', '279591', '0', '0', '8', '0', '30', 'f', '0.7', '180', '135', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279609', '279591', '0', '0', '9', '0', '1', 't', '0.8', '90', '0', '0', '0');
INSERT INTO "resultnodechoice" VALUES ('279610', '279591', '0', '0', '9', '0', '10', 'f', '0.8', '180', '90', '0', '0');
COMMIT;

-- ----------------------------
--  Table structure for "resultroute"
-- ----------------------------
DROP TABLE IF EXISTS "resultroute" CASCADE;
CREATE TABLE "resultroute" (
	"id" int4 NOT NULL,
	"geom" "geometry",
	"sourcerouteid" int4,
	"respondentid" int4,
	"nodeid" int4,
	"selected" bool,
	"length" float4,
	"lengthr" float4,
	"nedges" int4,
	"nedgeswopts" int4,
	"pptson" float4,
	"pptsoff" float4,
	"matchlengthr" float4,
	"nomatchlengthr" float4,
	"matchscore" float4,
	"nleftturns" int2,
	"nrightturns" int2,
	"nfrontturns" int2,
	"nbackturns" int2,
	"curviness" float4,
	"ntrafficlights" int2,
	"envattr00" float4,
	"envattr01" float4,
	"envattr02" float4,
	"envattr03" float4,
	"envattr04" float4,
	"envattr05" float4,
	"envattr06" float4,
	"envattr07" float4,
	"envattr08" float4,
	"cykattr00" float4,
	"cykattr01" float4,
	"cykattr02" float4,
	"cykattr03" float4,
	"cykattr04" float4,
	"groenm" float4
)
WITH (OIDS=FALSE);
ALTER TABLE "resultroute" OWNER TO "biker";

-- ----------------------------
--  Records of "resultroute"
-- ----------------------------
BEGIN;
INSERT INTO "resultroute" VALUES ('279591', '0102000020000000000B00000000000000870A264100000080838D574100000000870A264100000080008E5741000000006F0E264100000080008E5741000000006F0E2641000000807D8E57410000000057122641000000807D8E5741000000003F162641000000807D8E5741000000003F16264100000080FA8E5741000000003F16264100000080778F574100000000271A264100000080778F5741000000000F1E264100000080778F5741000000000F1E264100000080F48F5741', '0', '0', '0', 't', '5000', '0.756294', '10', '1', '0.94', '0.06', '1', '0', '0.0188', '4', '3', '3', '0', '2.19911', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0');
COMMIT;

-- ----------------------------
--  Table structure for "segregatedtype"
-- ----------------------------
DROP TABLE IF EXISTS "segregatedtype" CASCADE;
CREATE TABLE "segregatedtype" (
	"id" int2 NOT NULL,
	"descr" varchar(255)
)
WITH (OIDS=FALSE);
ALTER TABLE "segregatedtype" OWNER TO "biker";

-- ----------------------------
--  Table structure for "shortestpathlength"
-- ----------------------------
DROP TABLE IF EXISTS "shortestpathlength" CASCADE;
CREATE TABLE "shortestpathlength" (
	"id" int4 NOT NULL,
	"fromnode" int4,
	"tonode" int4,
	"length" float8
)
WITH (OIDS=FALSE);
ALTER TABLE "shortestpathlength" OWNER TO "biker";

-- ----------------------------
--  Table structure for "sourcepoint"
-- ----------------------------
DROP TABLE IF EXISTS "sourcepoint" CASCADE;
CREATE TABLE "sourcepoint" (
	"id" int4 NOT NULL,
	"geom" "geometry",
	"sourcerouteid" int4
)
WITH (OIDS=FALSE);
ALTER TABLE "sourcepoint" OWNER TO "biker";

-- ----------------------------
--  Records of "sourcepoint"
-- ----------------------------
BEGIN;
INSERT INTO "sourcepoint" VALUES ('279351', '010100002000000000D9B0DEA7300A2641E6C0E8827A8D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279352', '010100002000000000C23949D7820A26412D1564147D8D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279353', '010100002000000000C526F511B10A26414A66515A878D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279354', '0101000020000000006A468105640A2641323822B38F8D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279355', '010100002000000000C426F511B10A2641258681ADA18D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279356', '010100002000000000DC9D8AE25E0A2641882BEA84AE8D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279357', '01010000200000000089841A869C0A264118D4E0A7B38D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279358', '010100002000000000DB9D8AE25E0A2641F94CE1FDC48D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279359', '010100002000000000E5648E92E90A2641CF4953B2CC8D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279360', '0101000020000000001640656E730A264109EC2D3EE18D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279361', '01010000200000000057BC976FE40A2641DFE89FF2E88D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279362', '010100002000000000F8EE7728690A26416738C612F78D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279363', '010100002000000000CC004D870D0B2641CBDD2EEA038E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279364', '010100002000000000D2C75037980B2641D236FFECFA8D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279365', '01010000200000000052D309FF4B0C26418489B358018E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279366', '0101000020000000004236CCA3FA0C2641015D4BD7058E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279367', '0101000020000000001348A1029F0D264107B61BDAFC8D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279368', '0101000020000000006E28150FEC0D2641C061A048FA8D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279369', '01010000200000000020FC50ED570E26419CB7E2FFF88D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279370', '0101000020000000000885BB1CAA0E26416738C612F78D5741', '0');
INSERT INTO "sourcepoint" VALUES ('279371', '0101000020000000005E8BD7B39A0E264136DC67C4078E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279372', '0101000020000000001A0FA5B2290E26411EAE381D108E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279373', '0101000020000000005A9E2B796C0E2641D523AB27298E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279374', '01010000200000000064652F29F70E26414B9E72A3368E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279375', '010100002000000000AEA447105D0E264162968FE6498E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279376', '01010000200000000095400605810E2641F56144A8618E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279377', '01010000200000000002AB63A74D0E2641D6DA44FE728E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279378', '010100002000000000EC33CED69F0E264129AB4E317F8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279379', '0101000020000000004DEE9958490F2641F42B32447D8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279380', '01010000200000000056B59D08D40F26414D550C7A808E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279381', '010100002000000000EA37ECA0351026419A02580E7A8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279382', '01010000200000000025DAC62C4A1026419A02580E7A8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279383', '010100002000000000D6AD020BB61026414D550C7A808E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279384', '010100002000000000F9D847C61C112641892DF969798E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279385', '01010000200000000075F75453A21126414D550C7A808E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279386', '010100002000000000E93B0A6BCB1126419A02580E7A8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279387', '010100002000000000BB4DDFC96F12264165833B21788E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279388', '010100002000000000319294E198122641E256D39F7C8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279389', '010100002000000000E1782485D612264129AB4E317F8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279390', '01010000200000000003A469403D132641ACD7B6B27A8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279391', '010100002000000000D1C89264B3132641ACD7B6B27A8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279392', '0101000020000000002F96B2AB2E142641C928A4F8848E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279393', '010100002000000000A9B4BF38B4142641E256D39F7C8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279394', '01010000200000000076EC3C22FC142641FA840247748E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279395', '01010000200000000084A0EC0CB51526413B80ADD57F8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279396', '010100002000000000A4CB31C81B162641060191E87D8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279397', '0101000020000000001DFD921A7316264165833B21788E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279398', '010100002000000000C8F6768382162641B1FA74518D8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279399', '0101000020000000006D29573C071626412ECE0CD0918E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279400', '010100002000000000FEBEF9993A162641EB9C4FDDA18E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279401', '010100002000000000DC8060190216264161171759AF8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279402', '01010000200000000051C515312B162641263F2A69B68E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279403', '010100002000000000C609CB4854162641663AD5F7C18E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279404', '010100002000000000FCBEF9993A16264160E104F5CA8E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279405', '01010000200000000019233BA516162641E8302B15D98E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279406', '01010000200000000054B2C16B591626415EABF290E68E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279407', '010100002000000000A5CB31C81B1626410AA5D6F9F58E5741', '0');
INSERT INTO "sourcepoint" VALUES ('279408', '010100002000000000C509CB485416264127F6C33F008F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279409', '010100002000000000C41C1F0E261626411A44233A128F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279410', '010100002000000000E35AB88E5E16264125C0B1DB1B8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279411', '010100002000000000357428EB2016264142119F21268F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279412', '0101000020000000003B4E80607D16264147345DC0388F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279413', '010100002000000000F9D14D5F0C162641F32D4129488F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279414', '010100002000000000887A448211162641B75554394F8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279415', '010100002000000000579F6DA687162641D4A6417F598F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279416', '01010000200000000013368F6AE8152641C7F4A0796B8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279417', '010100002000000000A2DE858DED152641F61AED63768F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279418', '01010000200000000031877CB0F21526412541394E818F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279419', '01010000200000000018233BA516162641BE65BE12908F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279420', '010100002000000000AE923578A61626411FE8684B8A8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279421', '0101000020000000005B79C51BE4162641DEECBDBC7E8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279422', '010100002000000000B959392831172641AFC671D2738F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279423', '0101000020000000004DDC87C092172641569D979C708F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279424', '010100002000000000C6FA944D18182641211E7BAF6E8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279425', '0101000020000000005B7DE3E579182641FD73BD666D8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279426', '010100002000000000F1FF317EDB182641D9C9FF1D6C8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279427', '010100002000000000C1245BA251192641C7F4A0796B8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279428', '01010000200000000053BAFDFF841926419698422B7C8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279429', '010100002000000000904984C6C7192641EB9E5EC26C8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279430', '010100002000000000EE16A40D431A2641EB9E5EC26C8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279431', '010100002000000000F3F0FB829F1A2641A86DA1CF7C8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279432', '01010000200000000051BE1BCA1A1B264144C838F86F8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279433', '010100002000000000903A4ECB8B1B26413D6F68F5788F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279434', '0101000020000000000C595B58111C2641201E7BAF6E8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279435', '010100002000000000FEA8C937EE1C2641C19BD076748F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279436', '010100002000000000E157DCF1E31C264149EBF696828F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279437', '0101000020000000009CF21B80DA1D26410E491C0B6E8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279438', '01010000200000000032756A183C1E2641EB9E5EC26C8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279439', '0101000020000000001711290D601E2641CC175F187E8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279440', '010100002000000000BA4309C6E41D2641903F7228858F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279441', '0101000020000000004EC6575E461E2641006169A19B8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279442', '010100002000000000D694F60BEF1D26416F82601AB28F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279443', '0101000020000000008D55DE24891E264126F8D224CB8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279444', '0101000020000000009A057045AC1D2641327461C6D48F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279445', '010100002000000000663DED2EF41D26413DF0EF67DE8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279446', '010100002000000000662A9969221E264137971F65E78F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279447', '0101000020000000000F4A255DD51D2641FBBE3275EE8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279448', '010100002000000000F4E5E351F91D26413BBADD03FA8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279449', '010100002000000000C01D613B411E2641830E5995FC8F5741', '0');
INSERT INTO "sourcepoint" VALUES ('279450', '010100002000000000FABF3BC7551E2641D0BBA429F68F5741', '0');
COMMIT;

-- ----------------------------
--  Table structure for "sourceroute"
-- ----------------------------
DROP TABLE IF EXISTS "sourceroute" CASCADE;
CREATE TABLE "sourceroute" (
	"id" int4 NOT NULL,
	"respondentid" int4
)
WITH (OIDS=FALSE);
ALTER TABLE "sourceroute" OWNER TO "biker";

-- ----------------------------
--  Records of "sourceroute"
-- ----------------------------
BEGIN;
INSERT INTO "sourceroute" VALUES ('0', '0');
COMMIT;

-- ----------------------------
--  Table structure for "trafficlight"
-- ----------------------------
DROP TABLE IF EXISTS "trafficlight" CASCADE;
CREATE TABLE "trafficlight" (
	"id" int4 NOT NULL,
	"geom" "geometry",
	"nodeid" int4
)
WITH (OIDS=FALSE);
ALTER TABLE "trafficlight" OWNER TO "biker";

-- ----------------------------
--  View structure for "geography_columns"
-- ----------------------------
DROP VIEW IF EXISTS "geography_columns" CASCADE;
CREATE VIEW "geography_columns" AS SELECT current_database() AS f_table_catalog, n.nspname AS f_table_schema, c.relname AS f_table_name, a.attname AS f_geography_column, geography_typmod_dims(a.atttypmod) AS coord_dimension, geography_typmod_srid(a.atttypmod) AS srid, geography_typmod_type(a.atttypmod) AS type FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE ((((((t.typname = 'geography'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND (NOT pg_is_other_temp_schema(c.relnamespace)));

-- ----------------------------
--  Function structure for st_spheroid_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_spheroid_in"(cstring) CASCADE;
CREATE FUNCTION "st_spheroid_in"(IN cstring) RETURNS "public"."spheroid" 
	AS '$libdir/postgis-1.5','ellipsoid_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_spheroid_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_spheroid_out("public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_spheroid_out"("public"."spheroid") CASCADE;
CREATE FUNCTION "st_spheroid_out"(IN "public"."spheroid") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','ellipsoid_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_spheroid_out"(IN "public"."spheroid") OWNER TO "postgres";

-- ----------------------------
--  Function structure for spheroid_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "spheroid_in"(cstring) CASCADE;
CREATE FUNCTION "spheroid_in"(IN cstring) RETURNS "public"."spheroid" 
	AS '$libdir/postgis-1.5','ellipsoid_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "spheroid_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for spheroid_out("public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "spheroid_out"("public"."spheroid") CASCADE;
CREATE FUNCTION "spheroid_out"(IN "public"."spheroid") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','ellipsoid_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "spheroid_out"(IN "public"."spheroid") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_in"(cstring) CASCADE;
CREATE FUNCTION "st_geometry_in"(IN cstring) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_out("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_out"("public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_out"(IN "public"."geometry") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','LWGEOM_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_out"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_analyze(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_analyze"(internal) CASCADE;
CREATE FUNCTION "st_geometry_analyze"(IN internal) RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_analyze'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "st_geometry_analyze"(IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_recv(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_recv"(internal) CASCADE;
CREATE FUNCTION "st_geometry_recv"(IN internal) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_recv'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_recv"(IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_send("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_send"("public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_send"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-1.5','LWGEOM_send'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_send"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_in"(cstring) CASCADE;
CREATE FUNCTION "geometry_in"(IN cstring) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_out("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_out"("public"."geometry") CASCADE;
CREATE FUNCTION "geometry_out"(IN "public"."geometry") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','LWGEOM_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_out"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_analyze(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_analyze"(internal) CASCADE;
CREATE FUNCTION "geometry_analyze"(IN internal) RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_analyze'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geometry_analyze"(IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_recv(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_recv"(internal) CASCADE;
CREATE FUNCTION "geometry_recv"(IN internal) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_recv'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_recv"(IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_send("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_send"("public"."geometry") CASCADE;
CREATE FUNCTION "geometry_send"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-1.5','LWGEOM_send'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_send"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for affine("public"."geometry", float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "affine"("public"."geometry", float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_affine'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_affine("public"."geometry", float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_affine"("public"."geometry", float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_affine'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for affine("public"."geometry", float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "affine"("public"."geometry", float8, float8, float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_affine("public"."geometry", float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_affine"("public"."geometry", float8, float8, float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for rotatez("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "rotatez"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "rotatez"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "rotatez"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_rotatez("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_rotatez"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_rotatez"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_rotatez"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for rotate("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "rotate"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "rotate"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT rotateZ($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "rotate"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_rotate("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_rotate"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_rotate"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT rotateZ($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_rotate"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for rotatex("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "rotatex"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "rotatex"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "rotatex"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_rotatex("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_rotatex"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_rotatex"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_rotatex"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for rotatey("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "rotatey"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "rotatey"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "rotatey"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_rotatey("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_rotatey"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_rotatey"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_rotatey"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for translate("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "translate"("public"."geometry", float8, float8, float8) CASCADE;
CREATE FUNCTION "translate"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "translate"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_translate("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_translate"("public"."geometry", float8, float8, float8) CASCADE;
CREATE FUNCTION "st_translate"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_translate"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for translate("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "translate"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "translate"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT translate($1, $2, $3, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "translate"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_translate("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_translate"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "st_translate"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT translate($1, $2, $3, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_translate"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for scale("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "scale"("public"."geometry", float8, float8, float8) CASCADE;
CREATE FUNCTION "scale"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "scale"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_scale("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_scale"("public"."geometry", float8, float8, float8) CASCADE;
CREATE FUNCTION "st_scale"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_scale"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for scale("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "scale"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "scale"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT scale($1, $2, $3, 1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "scale"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_scale("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_scale"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "st_scale"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT scale($1, $2, $3, 1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_scale"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for transscale("public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "transscale"("public"."geometry", float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "transscale"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "transscale"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_transscale("public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_transscale"("public"."geometry", float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "st_transscale"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_transscale"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for shift_longitude("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "shift_longitude"("public"."geometry") CASCADE;
CREATE FUNCTION "shift_longitude"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_longitude_shift'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "shift_longitude"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_shift_longitude("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_shift_longitude"("public"."geometry") CASCADE;
CREATE FUNCTION "st_shift_longitude"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_longitude_shift'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_shift_longitude"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box3d_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box3d_in"(cstring) CASCADE;
CREATE FUNCTION "st_box3d_in"(IN cstring) RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX3D_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box3d_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box3d_out("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box3d_out"("public"."box3d") CASCADE;
CREATE FUNCTION "st_box3d_out"(IN "public"."box3d") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','BOX3D_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box3d_out"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box3d_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "box3d_in"(cstring) CASCADE;
CREATE FUNCTION "box3d_in"(IN cstring) RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX3D_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box3d_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for box3d_out("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "box3d_out"("public"."box3d") CASCADE;
CREATE FUNCTION "box3d_out"(IN "public"."box3d") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','BOX3D_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box3d_out"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box3d_extent_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "box3d_extent_in"(cstring) CASCADE;
CREATE FUNCTION "box3d_extent_in"(IN cstring) RETURNS "public"."box3d_extent" 
	AS '$libdir/postgis-1.5','BOX3D_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box3d_extent_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for box3d_extent_out("public"."box3d_extent")
-- ----------------------------
DROP FUNCTION IF EXISTS "box3d_extent_out"("public"."box3d_extent") CASCADE;
CREATE FUNCTION "box3d_extent_out"(IN "public"."box3d_extent") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','BOX3D_extent_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box3d_extent_out"(IN "public"."box3d_extent") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box3d_extent("public"."box3d_extent")
-- ----------------------------
DROP FUNCTION IF EXISTS "box3d_extent"("public"."box3d_extent") CASCADE;
CREATE FUNCTION "box3d_extent"(IN "public"."box3d_extent") RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX3D_extent_to_BOX3D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box3d_extent"(IN "public"."box3d_extent") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box2d("public"."box3d_extent")
-- ----------------------------
DROP FUNCTION IF EXISTS "box2d"("public"."box3d_extent") CASCADE;
CREATE FUNCTION "box2d"(IN "public"."box3d_extent") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX3D_to_BOX2DFLOAT4'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box2d"(IN "public"."box3d_extent") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry("public"."box3d_extent")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry"("public"."box3d_extent") CASCADE;
CREATE FUNCTION "geometry"(IN "public"."box3d_extent") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','BOX3D_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry"(IN "public"."box3d_extent") OWNER TO "postgres";

-- ----------------------------
--  Function structure for xmin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "xmin"("public"."box3d") CASCADE;
CREATE FUNCTION "xmin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_xmin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "xmin"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_xmin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_xmin"("public"."box3d") CASCADE;
CREATE FUNCTION "st_xmin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_xmin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_xmin"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for ymin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "ymin"("public"."box3d") CASCADE;
CREATE FUNCTION "ymin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_ymin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "ymin"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_ymin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_ymin"("public"."box3d") CASCADE;
CREATE FUNCTION "st_ymin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_ymin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_ymin"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for zmin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "zmin"("public"."box3d") CASCADE;
CREATE FUNCTION "zmin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_zmin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "zmin"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_zmin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_zmin"("public"."box3d") CASCADE;
CREATE FUNCTION "st_zmin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_zmin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_zmin"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for xmax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "xmax"("public"."box3d") CASCADE;
CREATE FUNCTION "xmax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_xmax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "xmax"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_xmax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_xmax"("public"."box3d") CASCADE;
CREATE FUNCTION "st_xmax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_xmax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_xmax"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for ymax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "ymax"("public"."box3d") CASCADE;
CREATE FUNCTION "ymax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_ymax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "ymax"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_ymax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_ymax"("public"."box3d") CASCADE;
CREATE FUNCTION "st_ymax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_ymax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_ymax"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for zmax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "zmax"("public"."box3d") CASCADE;
CREATE FUNCTION "zmax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_zmax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "zmax"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_zmax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_zmax"("public"."box3d") CASCADE;
CREATE FUNCTION "st_zmax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-1.5','BOX3D_zmax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_zmax"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for chip_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "chip_in"(cstring) CASCADE;
CREATE FUNCTION "chip_in"(IN cstring) RETURNS "public"."chip" 
	AS '$libdir/postgis-1.5','CHIP_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "chip_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for chip_out("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "chip_out"("public"."chip") CASCADE;
CREATE FUNCTION "chip_out"(IN "public"."chip") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','CHIP_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "chip_out"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_chip_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_chip_in"(cstring) CASCADE;
CREATE FUNCTION "st_chip_in"(IN cstring) RETURNS "public"."chip" 
	AS '$libdir/postgis-1.5','CHIP_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_chip_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_chip_out("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_chip_out"("public"."chip") CASCADE;
CREATE FUNCTION "st_chip_out"(IN "public"."chip") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','CHIP_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_chip_out"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box2d_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box2d_in"(cstring) CASCADE;
CREATE FUNCTION "st_box2d_in"(IN cstring) RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box2d_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box2d_out("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box2d_out"("public"."box2d") CASCADE;
CREATE FUNCTION "st_box2d_out"(IN "public"."box2d") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box2d_out"(IN "public"."box2d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box2d_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "box2d_in"(cstring) CASCADE;
CREATE FUNCTION "box2d_in"(IN cstring) RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box2d_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for box2d_out("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "box2d_out"("public"."box2d") CASCADE;
CREATE FUNCTION "box2d_out"(IN "public"."box2d") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box2d_out"(IN "public"."box2d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_lt("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_lt"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_lt"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','lwgeom_lt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_lt"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_le("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_le"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_le"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','lwgeom_le'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_le"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_gt("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_gt"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_gt"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','lwgeom_gt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_gt"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_ge("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_ge"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_ge"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','lwgeom_ge'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_ge"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_eq("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_eq"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_eq"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','lwgeom_eq'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_eq"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_cmp("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_cmp"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_cmp"(IN "public"."geometry", IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','lwgeom_cmp'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_cmp"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_lt("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_lt"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_lt"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','lwgeom_lt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_lt"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_le("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_le"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_le"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','lwgeom_le'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_le"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_gt("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_gt"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_gt"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','lwgeom_gt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_gt"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_ge("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_ge"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_ge"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','lwgeom_ge'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_ge"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_eq("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_eq"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_eq"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','lwgeom_eq'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_eq"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_cmp("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_cmp"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_cmp"(IN "public"."geometry", IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','lwgeom_cmp'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_cmp"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_gist_sel(internal, oid, internal, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_gist_sel"(internal, oid, internal, int4) CASCADE;
CREATE FUNCTION "postgis_gist_sel"(IN internal, IN oid, IN internal, IN int4) RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_sel'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "postgis_gist_sel"(IN internal, IN oid, IN internal, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_gist_joinsel(internal, oid, internal, int2)
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_gist_joinsel"(internal, oid, internal, int2) CASCADE;
CREATE FUNCTION "postgis_gist_joinsel"(IN internal, IN oid, IN internal, IN int2) RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_joinsel'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "postgis_gist_joinsel"(IN internal, IN oid, IN internal, IN int2) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_postgis_gist_sel(internal, oid, internal, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_postgis_gist_sel"(internal, oid, internal, int4) CASCADE;
CREATE FUNCTION "st_postgis_gist_sel"(IN internal, IN oid, IN internal, IN int4) RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_sel'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "st_postgis_gist_sel"(IN internal, IN oid, IN internal, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_postgis_gist_joinsel(internal, oid, internal, int2)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_postgis_gist_joinsel"(internal, oid, internal, int2) CASCADE;
CREATE FUNCTION "st_postgis_gist_joinsel"(IN internal, IN oid, IN internal, IN int2) RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_joinsel'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "st_postgis_gist_joinsel"(IN internal, IN oid, IN internal, IN int2) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_overleft("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_overleft"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_overleft"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_overleft'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_overleft"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_overright("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_overright"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_overright"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_overright'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_overright"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_overabove("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_overabove"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_overabove"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_overabove'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_overabove"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_overbelow("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_overbelow"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_overbelow"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_overbelow'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_overbelow"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_left("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_left"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_left"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_left'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_left"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_right("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_right"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_right"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_right'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_right"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_above("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_above"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_above"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_above'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_above"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_below("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_below"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_below"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_below'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_below"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_contain("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_contain"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_contain"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_contain'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_contain"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_contained("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_contained"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_contained"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_contained'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_contained"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_overlap("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_overlap"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_overlap"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_overlap'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_overlap"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry_same("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry_same"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_geometry_same"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_samebox'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry_same"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_same("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_same"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_same"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_samebox'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_same"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_gist_sel(internal, oid, internal, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_gist_sel"(internal, oid, internal, int4) CASCADE;
CREATE FUNCTION "geometry_gist_sel"(IN internal, IN oid, IN internal, IN int4) RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_sel'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geometry_gist_sel"(IN internal, IN oid, IN internal, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_gist_joinsel(internal, oid, internal, int2)
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_gist_joinsel"(internal, oid, internal, int2) CASCADE;
CREATE FUNCTION "geometry_gist_joinsel"(IN internal, IN oid, IN internal, IN int2) RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_joinsel'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geometry_gist_joinsel"(IN internal, IN oid, IN internal, IN int2) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_overleft("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_overleft"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_overleft"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_overleft'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_overleft"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_overright("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_overright"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_overright"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_overright'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_overright"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_overabove("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_overabove"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_overabove"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_overabove'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_overabove"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_overbelow("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_overbelow"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_overbelow"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_overbelow'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_overbelow"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_left("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_left"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_left"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_left'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_left"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_right("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_right"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_right"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_right'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_right"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_above("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_above"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_above"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_above'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_above"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_below("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_below"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_below"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_below'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_below"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_contain("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_contain"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_contain"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_contain'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_contain"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_contained("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_contained"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_contained"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_contained'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_contained"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_overlap("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_overlap"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_overlap"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_overlap'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_overlap"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry_samebox("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry_samebox"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geometry_samebox"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_samebox'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry_samebox"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for lwgeom_gist_consistent(internal, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "lwgeom_gist_consistent"(internal, "public"."geometry", int4) CASCADE;
CREATE FUNCTION "lwgeom_gist_consistent"(IN internal, IN "public"."geometry", IN int4) RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_consistent'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "lwgeom_gist_consistent"(IN internal, IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for lwgeom_gist_compress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "lwgeom_gist_compress"(internal) CASCADE;
CREATE FUNCTION "lwgeom_gist_compress"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_compress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "lwgeom_gist_compress"(IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for lwgeom_gist_penalty(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "lwgeom_gist_penalty"(internal, internal, internal) CASCADE;
CREATE FUNCTION "lwgeom_gist_penalty"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_penalty'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "lwgeom_gist_penalty"(IN internal, IN internal, IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for lwgeom_gist_picksplit(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "lwgeom_gist_picksplit"(internal, internal) CASCADE;
CREATE FUNCTION "lwgeom_gist_picksplit"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_picksplit'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "lwgeom_gist_picksplit"(IN internal, IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for lwgeom_gist_union(bytea, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "lwgeom_gist_union"(bytea, internal) CASCADE;
CREATE FUNCTION "lwgeom_gist_union"(IN bytea, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_union'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "lwgeom_gist_union"(IN bytea, IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for lwgeom_gist_same("public"."box2d", "public"."box2d", internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "lwgeom_gist_same"("public"."box2d", "public"."box2d", internal) CASCADE;
CREATE FUNCTION "lwgeom_gist_same"(IN "public"."box2d", IN "public"."box2d", IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_same'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "lwgeom_gist_same"(IN "public"."box2d", IN "public"."box2d", IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for lwgeom_gist_decompress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "lwgeom_gist_decompress"(internal) CASCADE;
CREATE FUNCTION "lwgeom_gist_decompress"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','LWGEOM_gist_decompress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "lwgeom_gist_decompress"(IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for addbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "addbbox"("public"."geometry") CASCADE;
CREATE FUNCTION "addbbox"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_addBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "addbbox"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_addbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_addbbox"("public"."geometry") CASCADE;
CREATE FUNCTION "postgis_addbbox"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_addBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_addbbox"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for dropbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "dropbbox"("public"."geometry") CASCADE;
CREATE FUNCTION "dropbbox"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_dropBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "dropbbox"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_dropbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_dropbbox"("public"."geometry") CASCADE;
CREATE FUNCTION "postgis_dropbbox"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_dropBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_dropbbox"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for getsrid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "getsrid"("public"."geometry") CASCADE;
CREATE FUNCTION "getsrid"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_getSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "getsrid"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for getbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "getbbox"("public"."geometry") CASCADE;
CREATE FUNCTION "getbbox"(IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','LWGEOM_to_BOX2DFLOAT4'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "getbbox"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_getbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_getbbox"("public"."geometry") CASCADE;
CREATE FUNCTION "postgis_getbbox"(IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','LWGEOM_to_BOX2DFLOAT4'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_getbbox"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for hasbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "hasbbox"("public"."geometry") CASCADE;
CREATE FUNCTION "hasbbox"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_hasBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "hasbbox"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_hasbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_hasbbox"("public"."geometry") CASCADE;
CREATE FUNCTION "postgis_hasbbox"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_hasBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_hasbbox"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for srid("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "srid"("public"."chip") CASCADE;
CREATE FUNCTION "srid"(IN "public"."chip") RETURNS "int4" 
	AS '$libdir/postgis-1.5','CHIP_getSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "srid"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_srid("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_srid"("public"."chip") CASCADE;
CREATE FUNCTION "st_srid"(IN "public"."chip") RETURNS "int4" 
	AS '$libdir/postgis-1.5','CHIP_getSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_srid"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for height("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "height"("public"."chip") CASCADE;
CREATE FUNCTION "height"(IN "public"."chip") RETURNS "int4" 
	AS '$libdir/postgis-1.5','CHIP_getHeight'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "height"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_height("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_height"("public"."chip") CASCADE;
CREATE FUNCTION "st_height"(IN "public"."chip") RETURNS "int4" 
	AS '$libdir/postgis-1.5','CHIP_getHeight'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_height"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for factor("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "factor"("public"."chip") CASCADE;
CREATE FUNCTION "factor"(IN "public"."chip") RETURNS "float4" 
	AS '$libdir/postgis-1.5','CHIP_getFactor'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "factor"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_factor("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_factor"("public"."chip") CASCADE;
CREATE FUNCTION "st_factor"(IN "public"."chip") RETURNS "float4" 
	AS '$libdir/postgis-1.5','CHIP_getFactor'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_factor"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for width("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "width"("public"."chip") CASCADE;
CREATE FUNCTION "width"(IN "public"."chip") RETURNS "int4" 
	AS '$libdir/postgis-1.5','CHIP_getWidth'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "width"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_width("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_width"("public"."chip") CASCADE;
CREATE FUNCTION "st_width"(IN "public"."chip") RETURNS "int4" 
	AS '$libdir/postgis-1.5','CHIP_getWidth'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_width"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for datatype("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "datatype"("public"."chip") CASCADE;
CREATE FUNCTION "datatype"(IN "public"."chip") RETURNS "int4" 
	AS '$libdir/postgis-1.5','CHIP_getDatatype'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "datatype"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_datatype("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_datatype"("public"."chip") CASCADE;
CREATE FUNCTION "st_datatype"(IN "public"."chip") RETURNS "int4" 
	AS '$libdir/postgis-1.5','CHIP_getDatatype'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_datatype"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for compression("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "compression"("public"."chip") CASCADE;
CREATE FUNCTION "compression"(IN "public"."chip") RETURNS "int4" 
	AS '$libdir/postgis-1.5','CHIP_getCompression'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "compression"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_compression("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_compression"("public"."chip") CASCADE;
CREATE FUNCTION "st_compression"(IN "public"."chip") RETURNS "int4" 
	AS '$libdir/postgis-1.5','CHIP_getCompression'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_compression"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for setsrid("public"."chip", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "setsrid"("public"."chip", int4) CASCADE;
CREATE FUNCTION "setsrid"(IN "public"."chip", IN int4) RETURNS "public"."chip" 
	AS '$libdir/postgis-1.5','CHIP_setSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "setsrid"(IN "public"."chip", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for setfactor("public"."chip", float4)
-- ----------------------------
DROP FUNCTION IF EXISTS "setfactor"("public"."chip", float4) CASCADE;
CREATE FUNCTION "setfactor"(IN "public"."chip", IN float4) RETURNS "public"."chip" 
	AS '$libdir/postgis-1.5','CHIP_setFactor'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "setfactor"(IN "public"."chip", IN float4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_setfactor("public"."chip", float4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_setfactor"("public"."chip", float4) CASCADE;
CREATE FUNCTION "st_setfactor"(IN "public"."chip", IN float4) RETURNS "public"."chip" 
	AS '$libdir/postgis-1.5','CHIP_setFactor'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_setfactor"(IN "public"."chip", IN float4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mem_size("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "mem_size"("public"."geometry") CASCADE;
CREATE FUNCTION "mem_size"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_mem_size'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mem_size"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mem_size("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mem_size"("public"."geometry") CASCADE;
CREATE FUNCTION "st_mem_size"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_mem_size'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mem_size"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for summary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "summary"("public"."geometry") CASCADE;
CREATE FUNCTION "summary"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_summary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "summary"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_summary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_summary"("public"."geometry") CASCADE;
CREATE FUNCTION "st_summary"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_summary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_summary"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for npoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "npoints"("public"."geometry") CASCADE;
CREATE FUNCTION "npoints"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_npoints'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "npoints"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_npoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_npoints"("public"."geometry") CASCADE;
CREATE FUNCTION "st_npoints"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_npoints'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_npoints"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for nrings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "nrings"("public"."geometry") CASCADE;
CREATE FUNCTION "nrings"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_nrings'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "nrings"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_nrings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_nrings"("public"."geometry") CASCADE;
CREATE FUNCTION "st_nrings"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_nrings'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_nrings"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for length3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "length3d"("public"."geometry") CASCADE;
CREATE FUNCTION "length3d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "length3d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_length3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_length3d"("public"."geometry") CASCADE;
CREATE FUNCTION "st_length3d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_length3d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for length2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "length2d"("public"."geometry") CASCADE;
CREATE FUNCTION "length2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length2d_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "length2d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_length2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_length2d"("public"."geometry") CASCADE;
CREATE FUNCTION "st_length2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length2d_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_length2d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for length("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "length"("public"."geometry") CASCADE;
CREATE FUNCTION "length"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "length"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_length("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_length"("public"."geometry") CASCADE;
CREATE FUNCTION "st_length"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length2d_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_length"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for length3d_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "length3d_spheroid"("public"."geometry", "public"."spheroid") CASCADE;
CREATE FUNCTION "length3d_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length_ellipsoid_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "length3d_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_length3d_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_length3d_spheroid"("public"."geometry", "public"."spheroid") CASCADE;
CREATE FUNCTION "st_length3d_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length_ellipsoid_linestring'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_length3d_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "postgres";

-- ----------------------------
--  Function structure for length_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "length_spheroid"("public"."geometry", "public"."spheroid") CASCADE;
CREATE FUNCTION "length_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length_ellipsoid_linestring'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "length_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_length_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_length_spheroid"("public"."geometry", "public"."spheroid") CASCADE;
CREATE FUNCTION "st_length_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length_ellipsoid_linestring'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_length_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "postgres";

-- ----------------------------
--  Function structure for length2d_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "length2d_spheroid"("public"."geometry", "public"."spheroid") CASCADE;
CREATE FUNCTION "length2d_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length2d_ellipsoid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "length2d_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_length2d_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_length2d_spheroid"("public"."geometry", "public"."spheroid") CASCADE;
CREATE FUNCTION "st_length2d_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_length2d_ellipsoid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_length2d_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "postgres";

-- ----------------------------
--  Function structure for perimeter3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "perimeter3d"("public"."geometry") CASCADE;
CREATE FUNCTION "perimeter3d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_perimeter_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "perimeter3d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_perimeter3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_perimeter3d"("public"."geometry") CASCADE;
CREATE FUNCTION "st_perimeter3d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_perimeter_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_perimeter3d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for perimeter2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "perimeter2d"("public"."geometry") CASCADE;
CREATE FUNCTION "perimeter2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_perimeter2d_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "perimeter2d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_perimeter2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_perimeter2d"("public"."geometry") CASCADE;
CREATE FUNCTION "st_perimeter2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_perimeter2d_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_perimeter2d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for perimeter("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "perimeter"("public"."geometry") CASCADE;
CREATE FUNCTION "perimeter"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_perimeter_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "perimeter"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_perimeter("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_perimeter"("public"."geometry") CASCADE;
CREATE FUNCTION "st_perimeter"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_perimeter2d_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_perimeter"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for area2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "area2d"("public"."geometry") CASCADE;
CREATE FUNCTION "area2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_area_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "area2d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_area2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_area2d"("public"."geometry") CASCADE;
CREATE FUNCTION "st_area2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_area_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_area2d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for area("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "area"("public"."geometry") CASCADE;
CREATE FUNCTION "area"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_area_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "area"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_area("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_area"("public"."geometry") CASCADE;
CREATE FUNCTION "st_area"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_area_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_area"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for distance_spheroid("public"."geometry", "public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "distance_spheroid"("public"."geometry", "public"."geometry", "public"."spheroid") CASCADE;
CREATE FUNCTION "distance_spheroid"(IN "public"."geometry", IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_distance_ellipsoid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "distance_spheroid"(IN "public"."geometry", IN "public"."geometry", IN "public"."spheroid") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_distance_spheroid("public"."geometry", "public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_distance_spheroid"("public"."geometry", "public"."geometry", "public"."spheroid") CASCADE;
CREATE FUNCTION "st_distance_spheroid"(IN "public"."geometry", IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_distance_ellipsoid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_distance_spheroid"(IN "public"."geometry", IN "public"."geometry", IN "public"."spheroid") OWNER TO "postgres";

-- ----------------------------
--  Function structure for distance_sphere("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "distance_sphere"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "distance_sphere"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_distance_sphere'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "distance_sphere"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_distance_sphere("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_distance_sphere"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_distance_sphere"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_distance_sphere'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_distance_sphere"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for distance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "distance"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "distance"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_mindistance2d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "distance"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_distance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_distance"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_distance"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_mindistance2d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_distance"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for point_inside_circle("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "point_inside_circle"("public"."geometry", float8, float8, float8) CASCADE;
CREATE FUNCTION "point_inside_circle"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_inside_circle_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "point_inside_circle"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_point_inside_circle("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_point_inside_circle"("public"."geometry", float8, float8, float8) CASCADE;
CREATE FUNCTION "st_point_inside_circle"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_inside_circle_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_point_inside_circle"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for azimuth("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "azimuth"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "azimuth"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_azimuth'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "azimuth"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_azimuth("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_azimuth"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_azimuth"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_azimuth'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_azimuth"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for force_2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "force_2d"("public"."geometry") CASCADE;
CREATE FUNCTION "force_2d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "force_2d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_force_2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_force_2d"("public"."geometry") CASCADE;
CREATE FUNCTION "st_force_2d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_force_2d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for force_3dz("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "force_3dz"("public"."geometry") CASCADE;
CREATE FUNCTION "force_3dz"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_3dz'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "force_3dz"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_force_3dz("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_force_3dz"("public"."geometry") CASCADE;
CREATE FUNCTION "st_force_3dz"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_3dz'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_force_3dz"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for force_3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "force_3d"("public"."geometry") CASCADE;
CREATE FUNCTION "force_3d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_3dz'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "force_3d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_force_3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_force_3d"("public"."geometry") CASCADE;
CREATE FUNCTION "st_force_3d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_3dz'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_force_3d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for force_3dm("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "force_3dm"("public"."geometry") CASCADE;
CREATE FUNCTION "force_3dm"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_3dm'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "force_3dm"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_force_3dm("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_force_3dm"("public"."geometry") CASCADE;
CREATE FUNCTION "st_force_3dm"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_3dm'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_force_3dm"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for force_4d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "force_4d"("public"."geometry") CASCADE;
CREATE FUNCTION "force_4d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_4d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "force_4d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_force_4d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_force_4d"("public"."geometry") CASCADE;
CREATE FUNCTION "st_force_4d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_4d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_force_4d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for force_collection("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "force_collection"("public"."geometry") CASCADE;
CREATE FUNCTION "force_collection"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "force_collection"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_force_collection("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_force_collection"("public"."geometry") CASCADE;
CREATE FUNCTION "st_force_collection"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_force_collection"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_collectionextract("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_collectionextract"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_collectionextract"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','ST_CollectionExtract'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_collectionextract"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multi("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "multi"("public"."geometry") CASCADE;
CREATE FUNCTION "multi"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_multi'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multi"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_multi("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_multi"("public"."geometry") CASCADE;
CREATE FUNCTION "st_multi"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_force_multi'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_multi"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for expand("public"."box3d", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "expand"("public"."box3d", float8) CASCADE;
CREATE FUNCTION "expand"(IN "public"."box3d", IN float8) RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX3D_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "expand"(IN "public"."box3d", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_expand("public"."box3d", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_expand"("public"."box3d", float8) CASCADE;
CREATE FUNCTION "st_expand"(IN "public"."box3d", IN float8) RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX3D_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_expand"(IN "public"."box3d", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for expand("public"."box2d", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "expand"("public"."box2d", float8) CASCADE;
CREATE FUNCTION "expand"(IN "public"."box2d", IN float8) RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "expand"(IN "public"."box2d", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_expand("public"."box2d", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_expand"("public"."box2d", float8) CASCADE;
CREATE FUNCTION "st_expand"(IN "public"."box2d", IN float8) RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_expand"(IN "public"."box2d", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for expand("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "expand"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "expand"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "expand"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_expand("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_expand"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_expand"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_expand"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for envelope("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "envelope"("public"."geometry") CASCADE;
CREATE FUNCTION "envelope"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_envelope'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "envelope"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_envelope("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_envelope"("public"."geometry") CASCADE;
CREATE FUNCTION "st_envelope"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_envelope'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_envelope"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for reverse("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "reverse"("public"."geometry") CASCADE;
CREATE FUNCTION "reverse"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_reverse'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "reverse"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_reverse("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_reverse"("public"."geometry") CASCADE;
CREATE FUNCTION "st_reverse"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_reverse'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_reverse"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for forcerhr("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "forcerhr"("public"."geometry") CASCADE;
CREATE FUNCTION "forcerhr"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_forceRHR_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "forcerhr"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_forcerhr("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_forcerhr"("public"."geometry") CASCADE;
CREATE FUNCTION "st_forcerhr"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_forceRHR_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_forcerhr"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for noop("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "noop"("public"."geometry") CASCADE;
CREATE FUNCTION "noop"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_noop'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "noop"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_noop("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_noop"("public"."geometry") CASCADE;
CREATE FUNCTION "postgis_noop"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_noop'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "postgis_noop"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for zmflag("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "zmflag"("public"."geometry") CASCADE;
CREATE FUNCTION "zmflag"(IN "public"."geometry") RETURNS "int2" 
	AS '$libdir/postgis-1.5','LWGEOM_zmflag'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "zmflag"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_zmflag("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_zmflag"("public"."geometry") CASCADE;
CREATE FUNCTION "st_zmflag"(IN "public"."geometry") RETURNS "int2" 
	AS '$libdir/postgis-1.5','LWGEOM_zmflag'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_zmflag"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for ndims("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "ndims"("public"."geometry") CASCADE;
CREATE FUNCTION "ndims"(IN "public"."geometry") RETURNS "int2" 
	AS '$libdir/postgis-1.5','LWGEOM_ndims'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "ndims"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_ndims("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_ndims"("public"."geometry") CASCADE;
CREATE FUNCTION "st_ndims"(IN "public"."geometry") RETURNS "int2" 
	AS '$libdir/postgis-1.5','LWGEOM_ndims'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_ndims"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for asewkt("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "asewkt"("public"."geometry") CASCADE;
CREATE FUNCTION "asewkt"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_asEWKT'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "asewkt"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asewkt("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asewkt"("public"."geometry") CASCADE;
CREATE FUNCTION "st_asewkt"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_asEWKT'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asewkt"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for asewkb("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "asewkb"("public"."geometry") CASCADE;
CREATE FUNCTION "asewkb"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-1.5','WKBFromLWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "asewkb"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asewkb("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asewkb"("public"."geometry") CASCADE;
CREATE FUNCTION "st_asewkb"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-1.5','WKBFromLWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asewkb"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for ashexewkb("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "ashexewkb"("public"."geometry") CASCADE;
CREATE FUNCTION "ashexewkb"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_asHEXEWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "ashexewkb"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_ashexewkb("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_ashexewkb"("public"."geometry") CASCADE;
CREATE FUNCTION "st_ashexewkb"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_asHEXEWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_ashexewkb"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for ashexewkb("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "ashexewkb"("public"."geometry", text) CASCADE;
CREATE FUNCTION "ashexewkb"(IN "public"."geometry", IN text) RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_asHEXEWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "ashexewkb"(IN "public"."geometry", IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_ashexewkb("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_ashexewkb"("public"."geometry", text) CASCADE;
CREATE FUNCTION "st_ashexewkb"(IN "public"."geometry", IN text) RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_asHEXEWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_ashexewkb"(IN "public"."geometry", IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for asewkb("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "asewkb"("public"."geometry", text) CASCADE;
CREATE FUNCTION "asewkb"(IN "public"."geometry", IN text) RETURNS "bytea" 
	AS '$libdir/postgis-1.5','WKBFromLWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "asewkb"(IN "public"."geometry", IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asewkb("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asewkb"("public"."geometry", text) CASCADE;
CREATE FUNCTION "st_asewkb"(IN "public"."geometry", IN text) RETURNS "bytea" 
	AS '$libdir/postgis-1.5','WKBFromLWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asewkb"(IN "public"."geometry", IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geomfromewkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "geomfromewkb"(bytea) CASCADE;
CREATE FUNCTION "geomfromewkb"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOMFromWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geomfromewkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomfromewkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomfromewkb"(bytea) CASCADE;
CREATE FUNCTION "st_geomfromewkb"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOMFromWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomfromewkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geomfromewkt(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "geomfromewkt"(text) CASCADE;
CREATE FUNCTION "geomfromewkt"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','parse_WKT_lwgeom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geomfromewkt"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomfromewkt(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomfromewkt"(text) CASCADE;
CREATE FUNCTION "st_geomfromewkt"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','parse_WKT_lwgeom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomfromewkt"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for makepoint(float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "makepoint"(float8, float8) CASCADE;
CREATE FUNCTION "makepoint"(IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "makepoint"(IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makepoint(float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makepoint"(float8, float8) CASCADE;
CREATE FUNCTION "st_makepoint"(IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makepoint"(IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for makepoint(float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "makepoint"(float8, float8, float8) CASCADE;
CREATE FUNCTION "makepoint"(IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "makepoint"(IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makepoint(float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makepoint"(float8, float8, float8) CASCADE;
CREATE FUNCTION "st_makepoint"(IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makepoint"(IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for makepoint(float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "makepoint"(float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "makepoint"(IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "makepoint"(IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makepoint(float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makepoint"(float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "st_makepoint"(IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makepoint"(IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for makepointm(float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "makepointm"(float8, float8, float8) CASCADE;
CREATE FUNCTION "makepointm"(IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoint3dm'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "makepointm"(IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makepointm(float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makepointm"(float8, float8, float8) CASCADE;
CREATE FUNCTION "st_makepointm"(IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoint3dm'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makepointm"(IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for makebox2d("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "makebox2d"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "makebox2d"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_construct'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "makebox2d"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makebox2d("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makebox2d"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_makebox2d"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_construct'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makebox2d"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for makebox3d("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "makebox3d"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "makebox3d"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX3D_construct'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "makebox3d"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makebox3d("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makebox3d"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_makebox3d"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX3D_construct'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makebox3d"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for makeline_garray("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "makeline_garray"("public"."_geometry") CASCADE;
CREATE FUNCTION "makeline_garray"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makeline_garray'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "makeline_garray"(IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makeline_garray("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makeline_garray"("public"."_geometry") CASCADE;
CREATE FUNCTION "st_makeline_garray"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makeline_garray'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makeline_garray"(IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makeline("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makeline"("public"."_geometry") CASCADE;
CREATE FUNCTION "st_makeline"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makeline_garray'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makeline"(IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for linefrommultipoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "linefrommultipoint"("public"."geometry") CASCADE;
CREATE FUNCTION "linefrommultipoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_line_from_mpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "linefrommultipoint"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_linefrommultipoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_linefrommultipoint"("public"."geometry") CASCADE;
CREATE FUNCTION "st_linefrommultipoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_line_from_mpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_linefrommultipoint"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for makeline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "makeline"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "makeline"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makeline'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "makeline"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makeline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makeline"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_makeline"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makeline'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makeline"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for addpoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "addpoint"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "addpoint"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_addpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "addpoint"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_addpoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_addpoint"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_addpoint"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_addpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_addpoint"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for addpoint("public"."geometry", "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "addpoint"("public"."geometry", "public"."geometry", int4) CASCADE;
CREATE FUNCTION "addpoint"(IN "public"."geometry", IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_addpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "addpoint"(IN "public"."geometry", IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_addpoint("public"."geometry", "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_addpoint"("public"."geometry", "public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_addpoint"(IN "public"."geometry", IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_addpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_addpoint"(IN "public"."geometry", IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for removepoint("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "removepoint"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "removepoint"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_removepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "removepoint"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_removepoint("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_removepoint"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_removepoint"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_removepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_removepoint"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for setpoint("public"."geometry", int4, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "setpoint"("public"."geometry", int4, "public"."geometry") CASCADE;
CREATE FUNCTION "setpoint"(IN "public"."geometry", IN int4, IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_setpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "setpoint"(IN "public"."geometry", IN int4, IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_setpoint("public"."geometry", int4, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_setpoint"("public"."geometry", int4, "public"."geometry") CASCADE;
CREATE FUNCTION "st_setpoint"(IN "public"."geometry", IN int4, IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_setpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_setpoint"(IN "public"."geometry", IN int4, IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makeenvelope(float8, float8, float8, float8, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makeenvelope"(float8, float8, float8, float8, int4) CASCADE;
CREATE FUNCTION "st_makeenvelope"(IN float8, IN float8, IN float8, IN float8, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','ST_MakeEnvelope'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makeenvelope"(IN float8, IN float8, IN float8, IN float8, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for makepolygon("public"."geometry", "public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "makepolygon"("public"."geometry", "public"."_geometry") CASCADE;
CREATE FUNCTION "makepolygon"(IN "public"."geometry", IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "makepolygon"(IN "public"."geometry", IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makepolygon("public"."geometry", "public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makepolygon"("public"."geometry", "public"."_geometry") CASCADE;
CREATE FUNCTION "st_makepolygon"(IN "public"."geometry", IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makepolygon"(IN "public"."geometry", IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for makepolygon("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "makepolygon"("public"."geometry") CASCADE;
CREATE FUNCTION "makepolygon"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "makepolygon"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_makepolygon("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_makepolygon"("public"."geometry") CASCADE;
CREATE FUNCTION "st_makepolygon"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_makepolygon"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for buildarea("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "buildarea"("public"."geometry") CASCADE;
CREATE FUNCTION "buildarea"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_buildarea'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "buildarea"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_buildarea("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_buildarea"("public"."geometry") CASCADE;
CREATE FUNCTION "st_buildarea"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_buildarea'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_buildarea"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for polygonize_garray("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "polygonize_garray"("public"."_geometry") CASCADE;
CREATE FUNCTION "polygonize_garray"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','polygonize_garray'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "polygonize_garray"(IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_polygonize_garray("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_polygonize_garray"("public"."_geometry") CASCADE;
CREATE FUNCTION "st_polygonize_garray"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','polygonize_garray'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_polygonize_garray"(IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_polygonize("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_polygonize"("public"."_geometry") CASCADE;
CREATE FUNCTION "st_polygonize"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','polygonize_garray'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_polygonize"(IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for linemerge("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "linemerge"("public"."geometry") CASCADE;
CREATE FUNCTION "linemerge"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','linemerge'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "linemerge"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_linemerge("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_linemerge"("public"."geometry") CASCADE;
CREATE FUNCTION "st_linemerge"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','linemerge'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_linemerge"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for dump("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "dump"("public"."geometry") CASCADE;
CREATE FUNCTION "dump"(IN "public"."geometry") RETURNS SETOF "public"."geometry_dump" 
	AS '$libdir/postgis-1.5','LWGEOM_dump'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "dump"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_dump("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_dump"("public"."geometry") CASCADE;
CREATE FUNCTION "st_dump"(IN "public"."geometry") RETURNS SETOF "public"."geometry_dump" 
	AS '$libdir/postgis-1.5','LWGEOM_dump'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_dump"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for dumprings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "dumprings"("public"."geometry") CASCADE;
CREATE FUNCTION "dumprings"(IN "public"."geometry") RETURNS SETOF "public"."geometry_dump" 
	AS '$libdir/postgis-1.5','LWGEOM_dump_rings'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "dumprings"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_dumprings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_dumprings"("public"."geometry") CASCADE;
CREATE FUNCTION "st_dumprings"(IN "public"."geometry") RETURNS SETOF "public"."geometry_dump" 
	AS '$libdir/postgis-1.5','LWGEOM_dump_rings'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_dumprings"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_dumppoints("public"."geometry", _int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_dumppoints"("public"."geometry", _int4) CASCADE;
CREATE FUNCTION "_st_dumppoints"(IN the_geom "public"."geometry", IN cur_path _int4) RETURNS SETOF "public"."geometry_dump" 
	AS $BODY$
DECLARE
  tmp geometry_dump;
  tmp2 geometry_dump;
  nb_points integer;
  nb_geom integer;
  i integer;
  j integer;
  g geometry;
  
BEGIN
  
  RAISE DEBUG '%,%', cur_path, ST_GeometryType(the_geom);

  -- Special case (MULTI* OR GEOMETRYCOLLECTION) : iterate and return the DumpPoints of the geometries
  SELECT ST_NumGeometries(the_geom) INTO nb_geom;

  IF (nb_geom IS NOT NULL) THEN
    
    i = 1;
    FOR tmp2 IN SELECT (ST_Dump(the_geom)).* LOOP

      FOR tmp IN SELECT * FROM _ST_DumpPoints(tmp2.geom, cur_path || tmp2.path) LOOP
	    RETURN NEXT tmp;
      END LOOP;
      i = i + 1;
      
    END LOOP;

    RETURN;
  END IF;
  

  -- Special case (POLYGON) : return the points of the rings of a polygon
  IF (ST_GeometryType(the_geom) = 'ST_Polygon') THEN

    FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_ExteriorRing(the_geom), cur_path || ARRAY[1]) LOOP
      RETURN NEXT tmp;
    END LOOP;
    
    j := ST_NumInteriorRings(the_geom);
    FOR i IN 1..j LOOP
        FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_InteriorRingN(the_geom, i), cur_path || ARRAY[i+1]) LOOP
          RETURN NEXT tmp;
        END LOOP;
    END LOOP;
    
    RETURN;
  END IF;

    
  -- Special case (POINT) : return the point
  IF (ST_GeometryType(the_geom) = 'ST_Point') THEN

    tmp.path = cur_path || ARRAY[1];
    tmp.geom = the_geom;

    RETURN NEXT tmp;
    RETURN;

  END IF;


  -- Use ST_NumPoints rather than ST_NPoints to have a NULL value if the_geom isn't
  -- a LINESTRING or CIRCULARSTRING.
  SELECT ST_NumPoints(the_geom) INTO nb_points;

  -- This should never happen
  IF (nb_points IS NULL) THEN
    RAISE EXCEPTION 'Unexpected error while dumping geometry %', ST_AsText(the_geom);
  END IF;

  FOR i IN 1..nb_points LOOP
    tmp.path = cur_path || ARRAY[i];
    tmp.geom := ST_PointN(the_geom, i);
    RETURN NEXT tmp;
  END LOOP;
   
END
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "_st_dumppoints"(IN the_geom "public"."geometry", IN cur_path _int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_dumppoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_dumppoints"("public"."geometry") CASCADE;
CREATE FUNCTION "st_dumppoints"(IN "public"."geometry") RETURNS SETOF "public"."geometry_dump" 
	AS $BODY$
  SELECT * FROM _ST_DumpPoints($1, NULL);
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "st_dumppoints"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for combine_bbox("public"."box2d", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "combine_bbox"("public"."box2d", "public"."geometry") CASCADE;
CREATE FUNCTION "combine_bbox"(IN "public"."box2d", IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_combine'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "combine_bbox"(IN "public"."box2d", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_combine_bbox("public"."box2d", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_combine_bbox"("public"."box2d", "public"."geometry") CASCADE;
CREATE FUNCTION "st_combine_bbox"(IN "public"."box2d", IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_combine'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_combine_bbox"(IN "public"."box2d", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for combine_bbox("public"."box3d_extent", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "combine_bbox"("public"."box3d_extent", "public"."geometry") CASCADE;
CREATE FUNCTION "combine_bbox"(IN "public"."box3d_extent", IN "public"."geometry") RETURNS "public"."box3d_extent" 
	AS '$libdir/postgis-1.5','BOX3D_combine'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "combine_bbox"(IN "public"."box3d_extent", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_combine_bbox("public"."box3d_extent", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_combine_bbox"("public"."box3d_extent", "public"."geometry") CASCADE;
CREATE FUNCTION "st_combine_bbox"(IN "public"."box3d_extent", IN "public"."geometry") RETURNS "public"."box3d_extent" 
	AS '$libdir/postgis-1.5','BOX3D_combine'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_combine_bbox"(IN "public"."box3d_extent", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for combine_bbox("public"."box3d", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "combine_bbox"("public"."box3d", "public"."geometry") CASCADE;
CREATE FUNCTION "combine_bbox"(IN "public"."box3d", IN "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX3D_combine'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "combine_bbox"(IN "public"."box3d", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_combine_bbox("public"."box3d", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_combine_bbox"("public"."box3d", "public"."geometry") CASCADE;
CREATE FUNCTION "st_combine_bbox"(IN "public"."box3d", IN "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX3D_combine'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_combine_bbox"(IN "public"."box3d", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for estimated_extent(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "estimated_extent"(text, text, text) CASCADE;
CREATE FUNCTION "estimated_extent"(IN text, IN text, IN text) RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','LWGEOM_estimated_extent'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY DEFINER
	IMMUTABLE;
ALTER FUNCTION "estimated_extent"(IN text, IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_estimated_extent(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_estimated_extent"(text, text, text) CASCADE;
CREATE FUNCTION "st_estimated_extent"(IN text, IN text, IN text) RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','LWGEOM_estimated_extent'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY DEFINER
	IMMUTABLE;
ALTER FUNCTION "st_estimated_extent"(IN text, IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for estimated_extent(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "estimated_extent"(text, text) CASCADE;
CREATE FUNCTION "estimated_extent"(IN text, IN text) RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','LWGEOM_estimated_extent'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY DEFINER
	IMMUTABLE;
ALTER FUNCTION "estimated_extent"(IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_estimated_extent(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_estimated_extent"(text, text) CASCADE;
CREATE FUNCTION "st_estimated_extent"(IN text, IN text) RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','LWGEOM_estimated_extent'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY DEFINER
	IMMUTABLE;
ALTER FUNCTION "st_estimated_extent"(IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for find_extent(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "find_extent"(text, text, text) CASCADE;
CREATE FUNCTION "find_extent"(IN text, IN text, IN text) RETURNS "public"."box2d" 
	AS $BODY$
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "find_extent"(IN text, IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_scripts_released()
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_scripts_released"() CASCADE;
CREATE FUNCTION "postgis_scripts_released"() RETURNS "text" 
	AS '$libdir/postgis-1.5','postgis_scripts_released'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_scripts_released"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_find_extent(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_find_extent"(text, text, text) CASCADE;
CREATE FUNCTION "st_find_extent"(IN text, IN text, IN text) RETURNS "public"."box2d" 
	AS $BODY$
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_find_extent"(IN text, IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for find_extent(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "find_extent"(text, text) CASCADE;
CREATE FUNCTION "find_extent"(IN text, IN text) RETURNS "public"."box2d" 
	AS $BODY$
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "find_extent"(IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_find_extent(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_find_extent"(text, text) CASCADE;
CREATE FUNCTION "st_find_extent"(IN text, IN text) RETURNS "public"."box2d" 
	AS $BODY$
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_find_extent"(IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for rename_geometry_table_constraints()
-- ----------------------------
DROP FUNCTION IF EXISTS "rename_geometry_table_constraints"() CASCADE;
CREATE FUNCTION "rename_geometry_table_constraints"() RETURNS "text" 
	AS $BODY$
SELECT 'rename_geometry_table_constraint() is obsoleted'::text
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "rename_geometry_table_constraints"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for fix_geometry_columns()
-- ----------------------------
DROP FUNCTION IF EXISTS "fix_geometry_columns"() CASCADE;
CREATE FUNCTION "fix_geometry_columns"() RETURNS "text" 
	AS $BODY$
DECLARE
	mislinked record;
	result text;
	linked integer;
	deleted integer;
	foundschema integer;
BEGIN

	-- Since 7.3 schema support has been added.
	-- Previous postgis versions used to put the database name in
	-- the schema column. This needs to be fixed, so we try to
	-- set the correct schema for each geometry_colums record
	-- looking at table, column, type and srid.
	UPDATE geometry_columns SET f_table_schema = n.nspname
		FROM pg_namespace n, pg_class c, pg_attribute a,
			pg_constraint sridcheck, pg_constraint typecheck
			WHERE ( f_table_schema is NULL
		OR f_table_schema = ''
			OR f_table_schema NOT IN (
					SELECT nspname::varchar
					FROM pg_namespace nn, pg_class cc, pg_attribute aa
					WHERE cc.relnamespace = nn.oid
					AND cc.relname = f_table_name::name
					AND aa.attrelid = cc.oid
					AND aa.attname = f_geometry_column::name))
			AND f_table_name::name = c.relname
			AND c.oid = a.attrelid
			AND c.relnamespace = n.oid
			AND f_geometry_column::name = a.attname

			AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(srid(% = %)'
			AND sridcheck.consrc ~ textcat(' = ', srid::text)

			AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype(%) = ''%''::text) OR (% IS NULL))'
			AND typecheck.consrc ~ textcat(' = ''', type::text)

			AND NOT EXISTS (
					SELECT oid FROM geometry_columns gc
					WHERE c.relname::varchar = gc.f_table_name
					AND n.nspname::varchar = gc.f_table_schema
					AND a.attname::varchar = gc.f_geometry_column
			);

	GET DIAGNOSTICS foundschema = ROW_COUNT;

	-- no linkage to system table needed
	return 'fixed:'||foundschema::text;

END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "fix_geometry_columns"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for populate_geometry_columns()
-- ----------------------------
DROP FUNCTION IF EXISTS "populate_geometry_columns"() CASCADE;
CREATE FUNCTION "populate_geometry_columns"() RETURNS "text" 
	AS $BODY$
DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;

BEGIN
	SELECT count(*) INTO oldcount FROM geometry_columns;
	inserted := 0;

	EXECUTE 'TRUNCATE geometry_columns';

	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE (c.relkind = 'r' OR c.relkind = 'v')
	AND t.typname = 'geometry'
	AND a.attisdropped = false
	AND a.atttypid = t.oid
	AND a.attrelid = c.oid
	AND c.relnamespace = n.oid
	AND n.nspname NOT ILIKE 'pg_temp%';

	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';

	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
	LOOP

	inserted := inserted + populate_geometry_columns(gcs.oid);
	END LOOP;

	-- Add views to geometry columns table
	RAISE DEBUG 'Processing Views.....';
	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'v'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
	LOOP

	inserted := inserted + populate_geometry_columns(gcs.oid);
	END LOOP;

	IF oldcount > inserted THEN
	stale = oldcount-inserted;
	ELSE
	stale = 0;
	END IF;

	RETURN 'probed:' ||probed|| ' inserted:'||inserted|| ' conflicts:'||probed-inserted|| ' deleted:'||stale;
END

$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "populate_geometry_columns"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for populate_geometry_columns(oid)
-- ----------------------------
DROP FUNCTION IF EXISTS "populate_geometry_columns"(oid) CASCADE;
CREATE FUNCTION "populate_geometry_columns"(IN tbl_oid oid) RETURNS "int4" 
	AS $BODY$
DECLARE
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
	inserted    integer;

BEGIN
	inserted := 0;

	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP

	RAISE DEBUG 'Processing table %.%.%', gcs.nspname, gcs.relname, gcs.attname;

	DELETE FROM geometry_columns
	  WHERE f_table_schema = gcs.nspname
	  AND f_table_name = gcs.relname
	  AND f_geometry_column = gcs.attname;

	gc_is_valid := true;

	-- Try to find srid check from system tables (pg_constraint)
	gsrid :=
		(SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %');
	IF (gsrid IS NULL) THEN
		-- Try to find srid from the geometry itself
		EXECUTE 'SELECT srid(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gsrid := gc.srid;

		-- Try to apply srid check to column
		IF (gsrid IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
						 ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) || '
						 CHECK (srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
			EXCEPTION
				WHEN check_violation THEN
					RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
					gc_is_valid := false;
			END;
		END IF;
	END IF;

	-- Try to find ndims check from system tables (pg_constraint)
	gndims :=
		(SELECT replace(split_part(s.consrc, ' = ', 2), ')', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %');
	IF (gndims IS NULL) THEN
		-- Try to find ndims from the geometry itself
		EXECUTE 'SELECT ndims(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gndims := gc.ndims;

		-- Try to apply ndims check to column
		IF (gndims IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
						 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
						 CHECK (ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
			EXCEPTION
				WHEN check_violation THEN
					RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
					gc_is_valid := false;
			END;
		END IF;
	END IF;

	-- Try to find geotype check from system tables (pg_constraint)
	gtype :=
		(SELECT replace(split_part(s.consrc, '''', 2), ')', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %');
	IF (gtype IS NULL) THEN
		-- Try to find geotype from the geometry itself
		EXECUTE 'SELECT geometrytype(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gtype := gc.geometrytype;
		--IF (gtype IS NULL) THEN
		--    gtype := 'GEOMETRY';
		--END IF;

		-- Try to apply geometrytype check to column
		IF (gtype IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
				CHECK ((geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ') OR (' || quote_ident(gcs.attname) || ' IS NULL))';
			EXCEPTION
				WHEN check_violation THEN
					-- No geometry check can be applied. This column contains a number of geometry types.
					RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
			END;
		END IF;
	END IF;

	IF (gsrid IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the srid', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSIF (gndims IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the number of dimensions', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSIF (gtype IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the geometry type', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSE
		-- Only insert into geometry_columns if table constraints could be applied.
		IF (gc_is_valid) THEN
			INSERT INTO geometry_columns (f_table_catalog,f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type)
			VALUES ('', gcs.nspname, gcs.relname, gcs.attname, gndims, gsrid, gtype);
			inserted := inserted + 1;
		END IF;
	END IF;
	END LOOP;

	-- Add views to geometry columns table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'v'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP
		RAISE DEBUG 'Processing view %.%.%', gcs.nspname, gcs.relname, gcs.attname;

	DELETE FROM geometry_columns
	  WHERE f_table_schema = gcs.nspname
	  AND f_table_name = gcs.relname
	  AND f_geometry_column = gcs.attname;
	  
		EXECUTE 'SELECT ndims(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gndims := gc.ndims;

		EXECUTE 'SELECT srid(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gsrid := gc.srid;

		EXECUTE 'SELECT geometrytype(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gtype := gc.geometrytype;

		IF (gndims IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine ndims', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSIF (gsrid IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine srid', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSIF (gtype IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine gtype', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSE
			query := 'INSERT INTO geometry_columns (f_table_catalog,f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type) ' ||
					 'VALUES ('''', ' || quote_literal(gcs.nspname) || ',' || quote_literal(gcs.relname) || ',' || quote_literal(gcs.attname) || ',' || gndims || ',' || gsrid || ',' || quote_literal(gtype) || ')';
			EXECUTE query;
			inserted := inserted + 1;
		END IF;
	END LOOP;

	RETURN inserted;
END

$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "populate_geometry_columns"(IN tbl_oid oid) OWNER TO "postgres";

-- ----------------------------
--  Function structure for probe_geometry_columns()
-- ----------------------------
DROP FUNCTION IF EXISTS "probe_geometry_columns"() CASCADE;
CREATE FUNCTION "probe_geometry_columns"() RETURNS "text" 
	AS $BODY$
DECLARE
	inserted integer;
	oldcount integer;
	probed integer;
	stale integer;
BEGIN

	SELECT count(*) INTO oldcount FROM geometry_columns;

	SELECT count(*) INTO probed
		FROM pg_class c, pg_attribute a, pg_type t,
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck

		WHERE t.typname = 'geometry'
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid
		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(srid('||a.attname||') = %)'
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype('||a.attname||') = ''%''::text) OR (% IS NULL))'
		;

	INSERT INTO geometry_columns SELECT
		''::varchar as f_table_catalogue,
		n.nspname::varchar as f_table_schema,
		c.relname::varchar as f_table_name,
		a.attname::varchar as f_geometry_column,
		2 as coord_dimension,
		trim(both  ' =)' from
			replace(replace(split_part(
				sridcheck.consrc, ' = ', 2), ')', ''), '(', ''))::integer AS srid,
		trim(both ' =)''' from substr(typecheck.consrc,
			strpos(typecheck.consrc, '='),
			strpos(typecheck.consrc, '::')-
			strpos(typecheck.consrc, '=')
			))::varchar as type
		FROM pg_class c, pg_attribute a, pg_type t,
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck
		WHERE t.typname = 'geometry'
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid
		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(st_srid('||a.attname||') = %)'
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype('||a.attname||') = ''%''::text) OR (% IS NULL))'

			AND NOT EXISTS (
					SELECT oid FROM geometry_columns gc
					WHERE c.relname::varchar = gc.f_table_name
					AND n.nspname::varchar = gc.f_table_schema
					AND a.attname::varchar = gc.f_geometry_column
			);

	GET DIAGNOSTICS inserted = ROW_COUNT;

	IF oldcount > probed THEN
		stale = oldcount-probed;
	ELSE
		stale = 0;
	END IF;

	RETURN 'probed:'||probed::text||
		' inserted:'||inserted::text||
		' conflicts:'||(probed-inserted)::text||
		' stale:'||stale::text;
END

$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "probe_geometry_columns"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for addgeometrycolumn(varchar, varchar, varchar, varchar, int4, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "addgeometrycolumn"(varchar, varchar, varchar, varchar, int4, varchar, int4) CASCADE;
CREATE FUNCTION "addgeometrycolumn"(IN varchar, IN varchar, IN varchar, IN varchar, IN int4, IN varchar, IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	new_srid alias for $5;
	new_type alias for $6;
	new_dim alias for $7;
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;

BEGIN

	-- Verify geometry type
	IF ( NOT ( (new_type = 'GEOMETRY') OR
			   (new_type = 'GEOMETRYCOLLECTION') OR
			   (new_type = 'POINT') OR
			   (new_type = 'MULTIPOINT') OR
			   (new_type = 'POLYGON') OR
			   (new_type = 'MULTIPOLYGON') OR
			   (new_type = 'LINESTRING') OR
			   (new_type = 'MULTILINESTRING') OR
			   (new_type = 'GEOMETRYCOLLECTIONM') OR
			   (new_type = 'POINTM') OR
			   (new_type = 'MULTIPOINTM') OR
			   (new_type = 'POLYGONM') OR
			   (new_type = 'MULTIPOLYGONM') OR
			   (new_type = 'LINESTRINGM') OR
			   (new_type = 'MULTILINESTRINGM') OR
			   (new_type = 'CIRCULARSTRING') OR
			   (new_type = 'CIRCULARSTRINGM') OR
			   (new_type = 'COMPOUNDCURVE') OR
			   (new_type = 'COMPOUNDCURVEM') OR
			   (new_type = 'CURVEPOLYGON') OR
			   (new_type = 'CURVEPOLYGONM') OR
			   (new_type = 'MULTICURVE') OR
			   (new_type = 'MULTICURVEM') OR
			   (new_type = 'MULTISURFACE') OR
			   (new_type = 'MULTISURFACEM')) )
	THEN
		RAISE EXCEPTION 'Invalid type name - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM,
	or GEOMETRYCOLLECTIONM';
		RETURN 'fail';
	END IF;


	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <0) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;

	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;


	-- Verify SRID
	IF ( new_srid != -1 ) THEN
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumns() - invalid SRID';
			RETURN 'fail';
		END IF;
	END IF;


	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;

	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;


	-- Add geometry column to table
	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD COLUMN ' || quote_ident(column_name) ||
		' geometry ';
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Delete stale record in geometry_columns (if any)
	sql := 'DELETE FROM geometry_columns WHERE
		f_table_catalog = ' || quote_literal('') ||
		' AND f_table_schema = ' ||
		quote_literal(real_schema) ||
		' AND f_table_name = ' || quote_literal(table_name) ||
		' AND f_geometry_column = ' || quote_literal(column_name);
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Add record in geometry_columns
	sql := 'INSERT INTO geometry_columns (f_table_catalog,f_table_schema,f_table_name,' ||
										  'f_geometry_column,coord_dimension,srid,type)' ||
		' VALUES (' ||
		quote_literal('') || ',' ||
		quote_literal(real_schema) || ',' ||
		quote_literal(table_name) || ',' ||
		quote_literal(column_name) || ',' ||
		new_dim::text || ',' ||
		new_srid::text || ',' ||
		quote_literal(new_type) || ')';
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Add table CHECKs
	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD CONSTRAINT '
		|| quote_ident('enforce_srid_' || column_name)
		|| ' CHECK (ST_SRID(' || quote_ident(column_name) ||
		') = ' || new_srid::text || ')' ;
	RAISE DEBUG '%', sql;
	EXECUTE sql;

	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD CONSTRAINT '
		|| quote_ident('enforce_dims_' || column_name)
		|| ' CHECK (ST_NDims(' || quote_ident(column_name) ||
		') = ' || new_dim::text || ')' ;
	RAISE DEBUG '%', sql;
	EXECUTE sql;

	IF ( NOT (new_type = 'GEOMETRY')) THEN
		sql := 'ALTER TABLE ' ||
			quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
			quote_ident('enforce_geotype_' || column_name) ||
			' CHECK (GeometryType(' ||
			quote_ident(column_name) || ')=' ||
			quote_literal(new_type) || ' OR (' ||
			quote_ident(column_name) || ') is null)';
		RAISE DEBUG '%', sql;
		EXECUTE sql;
	END IF;

	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "addgeometrycolumn"(IN varchar, IN varchar, IN varchar, IN varchar, IN int4, IN varchar, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for addgeometrycolumn(varchar, varchar, varchar, int4, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "addgeometrycolumn"(varchar, varchar, varchar, int4, varchar, int4) CASCADE;
CREATE FUNCTION "addgeometrycolumn"(IN varchar, IN varchar, IN varchar, IN int4, IN varchar, IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('',$1,$2,$3,$4,$5,$6) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "addgeometrycolumn"(IN varchar, IN varchar, IN varchar, IN int4, IN varchar, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for addgeometrycolumn(varchar, varchar, int4, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "addgeometrycolumn"(varchar, varchar, int4, varchar, int4) CASCADE;
CREATE FUNCTION "addgeometrycolumn"(IN varchar, IN varchar, IN int4, IN varchar, IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('','',$1,$2,$3,$4,$5) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "addgeometrycolumn"(IN varchar, IN varchar, IN int4, IN varchar, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for dropgeometrycolumn(varchar, varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "dropgeometrycolumn"(varchar, varchar, varchar, varchar) CASCADE;
CREATE FUNCTION "dropgeometrycolumn"(IN varchar, IN varchar, IN varchar, IN varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	myrec RECORD;
	okay boolean;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = 'f';

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := 't';
		END LOOP;

		IF ( okay <> 't' ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = 'f';
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := 't';
	END LOOP;
	IF (okay <> 't') THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN 'f';
	END IF;

	-- Remove ref from geometry_columns table
	EXECUTE 'delete from geometry_columns where f_table_schema = ' ||
		quote_literal(real_schema) || ' and f_table_name = ' ||
		quote_literal(table_name)  || ' and f_geometry_column = ' ||
		quote_literal(column_name);

	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);

	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';

END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "dropgeometrycolumn"(IN varchar, IN varchar, IN varchar, IN varchar) OWNER TO "postgres";

-- ----------------------------
--  Function structure for dropgeometrycolumn(varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "dropgeometrycolumn"(varchar, varchar, varchar) CASCADE;
CREATE FUNCTION "dropgeometrycolumn"(IN varchar, IN varchar, IN varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('',$1,$2,$3) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "dropgeometrycolumn"(IN varchar, IN varchar, IN varchar) OWNER TO "postgres";

-- ----------------------------
--  Function structure for dropgeometrycolumn(varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "dropgeometrycolumn"(varchar, varchar) CASCADE;
CREATE FUNCTION "dropgeometrycolumn"(IN varchar, IN varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('','',$1,$2) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "dropgeometrycolumn"(IN varchar, IN varchar) OWNER TO "postgres";

-- ----------------------------
--  Function structure for dropgeometrytable(varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "dropgeometrytable"(varchar, varchar, varchar) CASCADE;
CREATE FUNCTION "dropgeometrytable"(IN varchar, IN varchar, IN varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	real_schema name;

BEGIN

	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;

	-- Remove refs from geometry_columns table
	EXECUTE 'DELETE FROM geometry_columns WHERE ' ||
		'f_table_schema = ' || quote_literal(real_schema) ||
		' AND ' ||
		' f_table_name = ' || quote_literal(table_name);

	-- Remove table
	EXECUTE 'DROP TABLE '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name);

	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';

END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "dropgeometrytable"(IN varchar, IN varchar, IN varchar) OWNER TO "postgres";

-- ----------------------------
--  Function structure for dropgeometrytable(varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "dropgeometrytable"(varchar, varchar) CASCADE;
CREATE FUNCTION "dropgeometrytable"(IN varchar, IN varchar) RETURNS "text" 
	AS $BODY$ SELECT DropGeometryTable('',$1,$2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "dropgeometrytable"(IN varchar, IN varchar) OWNER TO "postgres";

-- ----------------------------
--  Function structure for dropgeometrytable(varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "dropgeometrytable"(varchar) CASCADE;
CREATE FUNCTION "dropgeometrytable"(IN varchar) RETURNS "text" 
	AS $BODY$ SELECT DropGeometryTable('','',$1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "dropgeometrytable"(IN varchar) OWNER TO "postgres";

-- ----------------------------
--  Function structure for updategeometrysrid(varchar, varchar, varchar, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "updategeometrysrid"(varchar, varchar, varchar, varchar, int4) CASCADE;
CREATE FUNCTION "updategeometrysrid"(IN varchar, IN varchar, IN varchar, IN varchar, IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	new_srid alias for $5;
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = 'f';

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := 't';
		END LOOP;

		IF ( okay <> 't' ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = 'f';
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := 't';
	END LOOP;
	IF (okay <> 't') THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN 'f';
	END IF;

	-- Update ref from geometry_columns table
	EXECUTE 'UPDATE geometry_columns SET SRID = ' || new_srid::text ||
		' where f_table_schema = ' ||
		quote_literal(real_schema) || ' and f_table_name = ' ||
		quote_literal(table_name)  || ' and f_geometry_column = ' ||
		quote_literal(column_name);

	-- Make up constraint name
	cname = 'enforce_srid_'  || column_name;

	-- Drop enforce_srid constraint
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' DROP constraint ' || quote_ident(cname);

	-- Update geometries SRID
	EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' SET ' || quote_ident(column_name) ||
		' = setSRID(' || quote_ident(column_name) ||
		', ' || new_srid::text || ')';

	-- Reset enforce_srid constraint
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' ADD constraint ' || quote_ident(cname) ||
		' CHECK (srid(' || quote_ident(column_name) ||
		') = ' || new_srid::text || ')';

	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;

END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "updategeometrysrid"(IN varchar, IN varchar, IN varchar, IN varchar, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for updategeometrysrid(varchar, varchar, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "updategeometrysrid"(varchar, varchar, varchar, int4) CASCADE;
CREATE FUNCTION "updategeometrysrid"(IN varchar, IN varchar, IN varchar, IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('',$1,$2,$3,$4) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "updategeometrysrid"(IN varchar, IN varchar, IN varchar, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for updategeometrysrid(varchar, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "updategeometrysrid"(varchar, varchar, int4) CASCADE;
CREATE FUNCTION "updategeometrysrid"(IN varchar, IN varchar, IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('','',$1,$2,$3) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "updategeometrysrid"(IN varchar, IN varchar, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for find_srid(varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "find_srid"(varchar, varchar, varchar) CASCADE;
CREATE FUNCTION "find_srid"(IN varchar, IN varchar, IN varchar) RETURNS "int4" 
	AS $BODY$
DECLARE
	schem text;
	tabl text;
	sr int4;
BEGIN
	IF $1 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - schema is NULL!';
	END IF;
	IF $2 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - table name is NULL!';
	END IF;
	IF $3 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - column name is NULL!';
	END IF;
	schem = $1;
	tabl = $2;
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and tabl LIKE '%.%' ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	ELSE
	 schem = schem || '%';
	END IF;

	select SRID into sr from geometry_columns where f_table_schema like schem and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - couldnt find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase missmatch?';
	END IF;
	return sr;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "find_srid"(IN varchar, IN varchar, IN varchar) OWNER TO "postgres";

-- ----------------------------
--  Function structure for get_proj4_from_srid(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "get_proj4_from_srid"(int4) CASCADE;
CREATE FUNCTION "get_proj4_from_srid"(IN int4) RETURNS "text" 
	AS $BODY$
BEGIN
	RETURN proj4text::text FROM spatial_ref_sys WHERE srid= $1;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "get_proj4_from_srid"(IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_transform_geometry("public"."geometry", text, text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_transform_geometry"("public"."geometry", text, text, int4) CASCADE;
CREATE FUNCTION "postgis_transform_geometry"(IN "public"."geometry", IN text, IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','transform_geom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_transform_geometry"(IN "public"."geometry", IN text, IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for transform("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "transform"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "transform"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','transform'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "transform"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_transform("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_transform"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_transform"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','transform'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_transform"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_version"() CASCADE;
CREATE FUNCTION "postgis_version"() RETURNS "text" 
	AS '$libdir/postgis-1.5','postgis_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_version"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_proj_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_proj_version"() CASCADE;
CREATE FUNCTION "postgis_proj_version"() RETURNS "text" 
	AS '$libdir/postgis-1.5','postgis_proj_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_proj_version"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_scripts_installed()
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_scripts_installed"() CASCADE;
CREATE FUNCTION "postgis_scripts_installed"() RETURNS "text" 
	AS $BODY$SELECT '1.5 r7360'::text AS version$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_scripts_installed"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_lib_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_lib_version"() CASCADE;
CREATE FUNCTION "postgis_lib_version"() RETURNS "text" 
	AS '$libdir/postgis-1.5','postgis_lib_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_lib_version"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_uses_stats()
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_uses_stats"() CASCADE;
CREATE FUNCTION "postgis_uses_stats"() RETURNS "bool" 
	AS '$libdir/postgis-1.5','postgis_uses_stats'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_uses_stats"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_geos_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_geos_version"() CASCADE;
CREATE FUNCTION "postgis_geos_version"() RETURNS "text" 
	AS '$libdir/postgis-1.5','postgis_geos_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_geos_version"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_libxml_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_libxml_version"() CASCADE;
CREATE FUNCTION "postgis_libxml_version"() RETURNS "text" 
	AS '$libdir/postgis-1.5','postgis_libxml_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_libxml_version"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_scripts_build_date()
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_scripts_build_date"() CASCADE;
CREATE FUNCTION "postgis_scripts_build_date"() RETURNS "text" 
	AS $BODY$SELECT '2011-07-02 15:09:39'::text AS version$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_scripts_build_date"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_lib_build_date()
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_lib_build_date"() CASCADE;
CREATE FUNCTION "postgis_lib_build_date"() RETURNS "text" 
	AS '$libdir/postgis-1.5','postgis_lib_build_date'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_lib_build_date"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for postgis_full_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "postgis_full_version"() CASCADE;
CREATE FUNCTION "postgis_full_version"() RETURNS "text" 
	AS $BODY$
DECLARE
	libver text;
	projver text;
	geosver text;
	libxmlver text;
	usestats bool;
	dbproc text;
	relproc text;
	fullver text;
BEGIN
	SELECT postgis_lib_version() INTO libver;
	SELECT postgis_proj_version() INTO projver;
	SELECT postgis_geos_version() INTO geosver;
	SELECT postgis_libxml_version() INTO libxmlver;
	SELECT postgis_uses_stats() INTO usestats;
	SELECT postgis_scripts_installed() INTO dbproc;
	SELECT postgis_scripts_released() INTO relproc;

	fullver = 'POSTGIS="' || libver || '"';

	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
	END IF;

	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
	END IF;

	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;

	IF usestats THEN
		fullver = fullver || ' USE_STATS';
	END IF;

	-- fullver = fullver || ' DBPROC="' || dbproc || '"';
	-- fullver = fullver || ' RELPROC="' || relproc || '"';

	IF dbproc != relproc THEN
		fullver = fullver || ' (procs from ' || dbproc || ' need upgrade)';
	END IF;

	RETURN fullver;
END
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "postgis_full_version"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box2d"("public"."geometry") CASCADE;
CREATE FUNCTION "st_box2d"(IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','LWGEOM_to_BOX2DFLOAT4'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box2d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box3d"("public"."geometry") CASCADE;
CREATE FUNCTION "st_box3d"(IN "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','LWGEOM_to_BOX3D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box3d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box"("public"."geometry") CASCADE;
CREATE FUNCTION "st_box"(IN "public"."geometry") RETURNS "box" 
	AS '$libdir/postgis-1.5','LWGEOM_to_BOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box2d("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box2d"("public"."box3d") CASCADE;
CREATE FUNCTION "st_box2d"(IN "public"."box3d") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX3D_to_BOX2DFLOAT4'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box2d"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box3d("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box3d"("public"."box2d") CASCADE;
CREATE FUNCTION "st_box3d"(IN "public"."box2d") RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_to_BOX3D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box3d"(IN "public"."box2d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box"("public"."box3d") CASCADE;
CREATE FUNCTION "st_box"(IN "public"."box3d") RETURNS "box" 
	AS '$libdir/postgis-1.5','BOX3D_to_BOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_text("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_text"("public"."geometry") CASCADE;
CREATE FUNCTION "st_text"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_to_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_text"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry"("public"."box2d") CASCADE;
CREATE FUNCTION "st_geometry"(IN "public"."box2d") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry"(IN "public"."box2d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry"("public"."box3d") CASCADE;
CREATE FUNCTION "st_geometry"(IN "public"."box3d") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','BOX3D_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry"(text) CASCADE;
CREATE FUNCTION "st_geometry"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','parse_WKT_lwgeom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry"("public"."chip") CASCADE;
CREATE FUNCTION "st_geometry"(IN "public"."chip") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','CHIP_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry"(bytea) CASCADE;
CREATE FUNCTION "st_geometry"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_bytea("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_bytea"("public"."geometry") CASCADE;
CREATE FUNCTION "st_bytea"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-1.5','LWGEOM_to_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_bytea"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box3d_extent("public"."box3d_extent")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box3d_extent"("public"."box3d_extent") CASCADE;
CREATE FUNCTION "st_box3d_extent"(IN "public"."box3d_extent") RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX3D_extent_to_BOX3D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box3d_extent"(IN "public"."box3d_extent") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_box2d("public"."box3d_extent")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_box2d"("public"."box3d_extent") CASCADE;
CREATE FUNCTION "st_box2d"(IN "public"."box3d_extent") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX3D_to_BOX2DFLOAT4'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_box2d"(IN "public"."box3d_extent") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometry("public"."box3d_extent")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometry"("public"."box3d_extent") CASCADE;
CREATE FUNCTION "st_geometry"(IN "public"."box3d_extent") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','BOX3D_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometry"(IN "public"."box3d_extent") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "box2d"("public"."geometry") CASCADE;
CREATE FUNCTION "box2d"(IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','LWGEOM_to_BOX2DFLOAT4'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box2d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "box3d"("public"."geometry") CASCADE;
CREATE FUNCTION "box3d"(IN "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','LWGEOM_to_BOX3D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box3d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "box"("public"."geometry") CASCADE;
CREATE FUNCTION "box"(IN "public"."geometry") RETURNS "box" 
	AS '$libdir/postgis-1.5','LWGEOM_to_BOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box2d("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "box2d"("public"."box3d") CASCADE;
CREATE FUNCTION "box2d"(IN "public"."box3d") RETURNS "public"."box2d" 
	AS '$libdir/postgis-1.5','BOX3D_to_BOX2DFLOAT4'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box2d"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box3d("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "box3d"("public"."box2d") CASCADE;
CREATE FUNCTION "box3d"(IN "public"."box2d") RETURNS "public"."box3d" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_to_BOX3D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box3d"(IN "public"."box2d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "box"("public"."box3d") CASCADE;
CREATE FUNCTION "box"(IN "public"."box3d") RETURNS "box" 
	AS '$libdir/postgis-1.5','BOX3D_to_BOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for text("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "text"("public"."geometry") CASCADE;
CREATE FUNCTION "text"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_to_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "text"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for box3dtobox("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "box3dtobox"("public"."box3d") CASCADE;
CREATE FUNCTION "box3dtobox"(IN "public"."box3d") RETURNS "box" 
	AS $BODY$SELECT box($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "box3dtobox"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry"("public"."box2d") CASCADE;
CREATE FUNCTION "geometry"(IN "public"."box2d") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','BOX2DFLOAT4_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry"(IN "public"."box2d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry"("public"."box3d") CASCADE;
CREATE FUNCTION "geometry"(IN "public"."box3d") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','BOX3D_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry"(IN "public"."box3d") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry"(text) CASCADE;
CREATE FUNCTION "geometry"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','parse_WKT_lwgeom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry("public"."chip")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry"("public"."chip") CASCADE;
CREATE FUNCTION "geometry"(IN "public"."chip") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','CHIP_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry"(IN "public"."chip") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry"(bytea) CASCADE;
CREATE FUNCTION "geometry"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for bytea("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "bytea"("public"."geometry") CASCADE;
CREATE FUNCTION "bytea"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-1.5','LWGEOM_to_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "bytea"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for simplify("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "simplify"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "simplify"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_simplify2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "simplify"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_simplify("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_simplify"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_simplify"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_simplify2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_simplify"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for snaptogrid("public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "snaptogrid"("public"."geometry", float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "snaptogrid"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_snaptogrid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "snaptogrid"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_snaptogrid("public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_snaptogrid"("public"."geometry", float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "st_snaptogrid"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_snaptogrid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_snaptogrid"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for snaptogrid("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "snaptogrid"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "snaptogrid"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT SnapToGrid($1, 0, 0, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "snaptogrid"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_snaptogrid("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_snaptogrid"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "st_snaptogrid"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_SnapToGrid($1, 0, 0, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_snaptogrid"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for snaptogrid("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "snaptogrid"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "snaptogrid"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT SnapToGrid($1, 0, 0, $2, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "snaptogrid"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_snaptogrid("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_snaptogrid"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_snaptogrid"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_SnapToGrid($1, 0, 0, $2, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_snaptogrid"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for snaptogrid("public"."geometry", "public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "snaptogrid"("public"."geometry", "public"."geometry", float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "snaptogrid"(IN "public"."geometry", IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_snaptogrid_pointoff'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "snaptogrid"(IN "public"."geometry", IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_snaptogrid("public"."geometry", "public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_snaptogrid"("public"."geometry", "public"."geometry", float8, float8, float8, float8) CASCADE;
CREATE FUNCTION "st_snaptogrid"(IN "public"."geometry", IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_snaptogrid_pointoff'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_snaptogrid"(IN "public"."geometry", IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for segmentize("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "segmentize"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "segmentize"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_segmentize2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "segmentize"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_segmentize("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_segmentize"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_segmentize"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_segmentize2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_segmentize"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for line_interpolate_point("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "line_interpolate_point"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "line_interpolate_point"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_line_interpolate_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "line_interpolate_point"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_line_interpolate_point("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_line_interpolate_point"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_line_interpolate_point"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_line_interpolate_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_line_interpolate_point"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for line_substring("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "line_substring"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "line_substring"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_line_substring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "line_substring"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_line_substring("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_line_substring"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "st_line_substring"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_line_substring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_line_substring"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for line_locate_point("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "line_locate_point"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "line_locate_point"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_line_locate_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "line_locate_point"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_line_locate_point("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_line_locate_point"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_line_locate_point"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_line_locate_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_line_locate_point"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for locate_between_measures("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "locate_between_measures"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "locate_between_measures"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_locate_between_m'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "locate_between_measures"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_locate_between_measures("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_locate_between_measures"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "st_locate_between_measures"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_locate_between_m'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_locate_between_measures"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for locate_along_measure("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "locate_along_measure"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "locate_along_measure"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$ SELECT locate_between_measures($1, $2, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "locate_along_measure"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_locate_along_measure("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_locate_along_measure"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_locate_along_measure"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$ SELECT locate_between_measures($1, $2, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_locate_along_measure"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_addmeasure("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_addmeasure"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "st_addmeasure"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','ST_AddMeasure'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_addmeasure"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for intersection("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "intersection"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "intersection"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','intersection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "intersection"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_intersection("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_intersection"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_intersection"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','intersection'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_intersection"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for buffer("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "buffer"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "buffer"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','buffer'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "buffer"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_buffer("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_buffer"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_buffer"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','buffer'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_buffer"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_buffer("public"."geometry", float8, cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_buffer"("public"."geometry", float8, cstring) CASCADE;
CREATE FUNCTION "_st_buffer"(IN "public"."geometry", IN float8, IN cstring) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','buffer'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_buffer"(IN "public"."geometry", IN float8, IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_buffer("public"."geometry", float8, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_buffer"("public"."geometry", float8, int4) CASCADE;
CREATE FUNCTION "st_buffer"(IN "public"."geometry", IN float8, IN int4) RETURNS "public"."geometry" 
	AS $BODY$ SELECT _ST_Buffer($1, $2,
		CAST('quad_segs='||CAST($3 AS text) as cstring))
	   $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_buffer"(IN "public"."geometry", IN float8, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_buffer("public"."geometry", float8, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_buffer"("public"."geometry", float8, text) CASCADE;
CREATE FUNCTION "st_buffer"(IN "public"."geometry", IN float8, IN text) RETURNS "public"."geometry" 
	AS $BODY$ SELECT _ST_Buffer($1, $2,
		CAST( regexp_replace($3, '^[0123456789]+$',
			'quad_segs='||$3) AS cstring)
		)
	   $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_buffer"(IN "public"."geometry", IN float8, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for buffer("public"."geometry", float8, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "buffer"("public"."geometry", float8, int4) CASCADE;
CREATE FUNCTION "buffer"(IN "public"."geometry", IN float8, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Buffer($1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "buffer"(IN "public"."geometry", IN float8, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for convexhull("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "convexhull"("public"."geometry") CASCADE;
CREATE FUNCTION "convexhull"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','convexhull'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "convexhull"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_convexhull("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_convexhull"("public"."geometry") CASCADE;
CREATE FUNCTION "st_convexhull"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','convexhull'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_convexhull"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_linecrossingdirection("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_linecrossingdirection"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_linecrossingdirection"(IN "public"."geometry", IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','ST_LineCrossingDirection'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_linecrossingdirection"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_linecrossingdirection("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_linecrossingdirection"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_linecrossingdirection"(IN "public"."geometry", IN "public"."geometry") RETURNS "int4" 
	AS $BODY$ SELECT CASE WHEN NOT $1 && $2 THEN 0 ELSE _ST_LineCrossingDirection($1,$2) END $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_linecrossingdirection"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_locatebetweenelevations("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_locatebetweenelevations"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "st_locatebetweenelevations"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','ST_LocateBetweenElevations'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_locatebetweenelevations"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_simplifypreservetopology("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_simplifypreservetopology"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_simplifypreservetopology"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','topologypreservesimplify'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_simplifypreservetopology"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_isvalidreason("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_isvalidreason"("public"."geometry") CASCADE;
CREATE FUNCTION "st_isvalidreason"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','isvalidreason'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_isvalidreason"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_hausdorffdistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_hausdorffdistance"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_hausdorffdistance"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','hausdorffdistance'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_hausdorffdistance"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_hausdorffdistance("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_hausdorffdistance"("public"."geometry", "public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_hausdorffdistance"(IN "public"."geometry", IN "public"."geometry", IN float8) RETURNS "float8" 
	AS '$libdir/postgis-1.5','hausdorffdistancedensify'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_hausdorffdistance"(IN "public"."geometry", IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for difference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "difference"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "difference"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','difference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "difference"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_difference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_difference"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_difference"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','difference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_difference"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for boundary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "boundary"("public"."geometry") CASCADE;
CREATE FUNCTION "boundary"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','boundary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "boundary"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_boundary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_boundary"("public"."geometry") CASCADE;
CREATE FUNCTION "st_boundary"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','boundary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_boundary"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for symdifference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "symdifference"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "symdifference"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','symdifference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "symdifference"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_symdifference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_symdifference"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_symdifference"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','symdifference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_symdifference"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for symmetricdifference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "symmetricdifference"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "symmetricdifference"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','symdifference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "symmetricdifference"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_symmetricdifference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_symmetricdifference"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_symmetricdifference"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','symdifference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_symmetricdifference"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geomunion("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geomunion"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "geomunion"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','geomunion'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geomunion"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_union("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_union"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_union"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','geomunion'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_union"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for collect("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "collect"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "collect"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_collect'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "collect"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_collect("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_collect"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_collect"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_collect'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_collect"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_collect("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_collect"("public"."_geometry") CASCADE;
CREATE FUNCTION "st_collect"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_collect_garray'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_collect"(IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for pgis_abs_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "pgis_abs_in"(cstring) CASCADE;
CREATE FUNCTION "pgis_abs_in"(IN cstring) RETURNS "public"."pgis_abs" 
	AS '$libdir/postgis-1.5','pgis_abs_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "pgis_abs_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for pgis_abs_out("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "pgis_abs_out"("public"."pgis_abs") CASCADE;
CREATE FUNCTION "pgis_abs_out"(IN "public"."pgis_abs") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','pgis_abs_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "pgis_abs_out"(IN "public"."pgis_abs") OWNER TO "postgres";

-- ----------------------------
--  Function structure for pgis_geometry_accum_transfn("public"."pgis_abs", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "pgis_geometry_accum_transfn"("public"."pgis_abs", "public"."geometry") CASCADE;
CREATE FUNCTION "pgis_geometry_accum_transfn"(IN "public"."pgis_abs", IN "public"."geometry") RETURNS "public"."pgis_abs" 
	AS '$libdir/postgis-1.5','pgis_geometry_accum_transfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "pgis_geometry_accum_transfn"(IN "public"."pgis_abs", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for pgis_geometry_accum_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "pgis_geometry_accum_finalfn"("public"."pgis_abs") CASCADE;
CREATE FUNCTION "pgis_geometry_accum_finalfn"(IN "public"."pgis_abs") RETURNS "public"."_geometry" 
	AS '$libdir/postgis-1.5','pgis_geometry_accum_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "pgis_geometry_accum_finalfn"(IN "public"."pgis_abs") OWNER TO "postgres";

-- ----------------------------
--  Function structure for pgis_geometry_union_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "pgis_geometry_union_finalfn"("public"."pgis_abs") CASCADE;
CREATE FUNCTION "pgis_geometry_union_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','pgis_geometry_union_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "pgis_geometry_union_finalfn"(IN "public"."pgis_abs") OWNER TO "postgres";

-- ----------------------------
--  Function structure for pgis_geometry_collect_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "pgis_geometry_collect_finalfn"("public"."pgis_abs") CASCADE;
CREATE FUNCTION "pgis_geometry_collect_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','pgis_geometry_collect_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "pgis_geometry_collect_finalfn"(IN "public"."pgis_abs") OWNER TO "postgres";

-- ----------------------------
--  Function structure for pgis_geometry_polygonize_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "pgis_geometry_polygonize_finalfn"("public"."pgis_abs") CASCADE;
CREATE FUNCTION "pgis_geometry_polygonize_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','pgis_geometry_polygonize_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "pgis_geometry_polygonize_finalfn"(IN "public"."pgis_abs") OWNER TO "postgres";

-- ----------------------------
--  Function structure for pgis_geometry_makeline_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "pgis_geometry_makeline_finalfn"("public"."pgis_abs") CASCADE;
CREATE FUNCTION "pgis_geometry_makeline_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','pgis_geometry_makeline_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "pgis_geometry_makeline_finalfn"(IN "public"."pgis_abs") OWNER TO "postgres";

-- ----------------------------
--  Function structure for unite_garray("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "unite_garray"("public"."_geometry") CASCADE;
CREATE FUNCTION "unite_garray"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','pgis_union_geometry_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "unite_garray"(IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_unite_garray("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_unite_garray"("public"."_geometry") CASCADE;
CREATE FUNCTION "st_unite_garray"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','pgis_union_geometry_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_unite_garray"(IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_union("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_union"("public"."_geometry") CASCADE;
CREATE FUNCTION "st_union"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','pgis_union_geometry_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_union"(IN "public"."_geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for relate("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "relate"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "relate"(IN "public"."geometry", IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','relate_full'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "relate"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_relate("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_relate"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_relate"(IN "public"."geometry", IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','relate_full'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_relate"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for relate("public"."geometry", "public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "relate"("public"."geometry", "public"."geometry", text) CASCADE;
CREATE FUNCTION "relate"(IN "public"."geometry", IN "public"."geometry", IN text) RETURNS "bool" 
	AS '$libdir/postgis-1.5','relate_pattern'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "relate"(IN "public"."geometry", IN "public"."geometry", IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_relate("public"."geometry", "public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_relate"("public"."geometry", "public"."geometry", text) CASCADE;
CREATE FUNCTION "st_relate"(IN "public"."geometry", IN "public"."geometry", IN text) RETURNS "bool" 
	AS '$libdir/postgis-1.5','relate_pattern'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_relate"(IN "public"."geometry", IN "public"."geometry", IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for disjoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "disjoint"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "disjoint"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','disjoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "disjoint"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_disjoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_disjoint"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_disjoint"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','disjoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_disjoint"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for touches("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "touches"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "touches"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','touches'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "touches"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_touches("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_touches"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_touches"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','touches'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_touches"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_touches("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_touches"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_touches"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Touches($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_touches"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_dwithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_dwithin"("public"."geometry", "public"."geometry", float8) CASCADE;
CREATE FUNCTION "_st_dwithin"(IN "public"."geometry", IN "public"."geometry", IN float8) RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_dwithin'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_dwithin"(IN "public"."geometry", IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_dwithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_dwithin"("public"."geometry", "public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_dwithin"(IN "public"."geometry", IN "public"."geometry", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_dwithin"(IN "public"."geometry", IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for intersects("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "intersects"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "intersects"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','intersects'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "intersects"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_intersects("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_intersects"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_intersects"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','intersects'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_intersects"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_intersects("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_intersects"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_intersects"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Intersects($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_intersects"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for crosses("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "crosses"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "crosses"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','crosses'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "crosses"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_crosses("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_crosses"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_crosses"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','crosses'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_crosses"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_crosses("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_crosses"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_crosses"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Crosses($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_crosses"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for within("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "within"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "within"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','within'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "within"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_within("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_within"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_within"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','within'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_within"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_within("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_within"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_within"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Within($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_within"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for contains("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "contains"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "contains"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','contains'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "contains"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_contains("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_contains"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_contains"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','contains'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_contains"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_contains("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_contains"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_contains"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Contains($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_contains"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_coveredby("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_coveredby"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_coveredby"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','coveredby'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_coveredby"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_coveredby("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_coveredby"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_coveredby"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_CoveredBy($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_coveredby"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_covers("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_covers"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_covers"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','covers'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_covers"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_covers("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_covers"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_covers"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Covers($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_covers"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_containsproperly("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_containsproperly"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_containsproperly"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','containsproperly'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_containsproperly"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_containsproperly("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_containsproperly"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_containsproperly"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_ContainsProperly($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_containsproperly"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for overlaps("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "overlaps"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "overlaps"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','overlaps'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "overlaps"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_overlaps("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_overlaps"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_overlaps"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','overlaps'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_overlaps"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_overlaps("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_overlaps"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_overlaps"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Overlaps($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_overlaps"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for isvalid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "isvalid"("public"."geometry") CASCADE;
CREATE FUNCTION "isvalid"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','isvalid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "isvalid"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_isvalid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_isvalid"("public"."geometry") CASCADE;
CREATE FUNCTION "st_isvalid"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','isvalid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_isvalid"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for centroid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "centroid"("public"."geometry") CASCADE;
CREATE FUNCTION "centroid"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','centroid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "centroid"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_centroid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_centroid"("public"."geometry") CASCADE;
CREATE FUNCTION "st_centroid"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','centroid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_centroid"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for isring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "isring"("public"."geometry") CASCADE;
CREATE FUNCTION "isring"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','isring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "isring"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_isring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_isring"("public"."geometry") CASCADE;
CREATE FUNCTION "st_isring"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','isring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_isring"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for pointonsurface("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "pointonsurface"("public"."geometry") CASCADE;
CREATE FUNCTION "pointonsurface"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','pointonsurface'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "pointonsurface"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_pointonsurface("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_pointonsurface"("public"."geometry") CASCADE;
CREATE FUNCTION "st_pointonsurface"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','pointonsurface'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_pointonsurface"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for issimple("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "issimple"("public"."geometry") CASCADE;
CREATE FUNCTION "issimple"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','issimple'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "issimple"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_issimple("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_issimple"("public"."geometry") CASCADE;
CREATE FUNCTION "st_issimple"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','issimple'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_issimple"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for equals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "equals"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "equals"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','geomequals'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "equals"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_equals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_equals"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_equals"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','geomequals'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_equals"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_equals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_equals"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_equals"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Equals($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_equals"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomfromgml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomfromgml"(text) CASCADE;
CREATE FUNCTION "st_geomfromgml"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','geom_from_gml'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomfromgml"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_gmltosql(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_gmltosql"(text) CASCADE;
CREATE FUNCTION "st_gmltosql"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','geom_from_gml'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_gmltosql"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomfromkml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomfromkml"(text) CASCADE;
CREATE FUNCTION "st_geomfromkml"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','geom_from_kml'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomfromkml"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for assvg("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "assvg"("public"."geometry", int4, int4) CASCADE;
CREATE FUNCTION "assvg"(IN "public"."geometry", IN int4, IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','assvg_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "assvg"(IN "public"."geometry", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_assvg("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_assvg"("public"."geometry", int4, int4) CASCADE;
CREATE FUNCTION "st_assvg"(IN "public"."geometry", IN int4, IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','assvg_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_assvg"(IN "public"."geometry", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for assvg("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "assvg"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "assvg"(IN "public"."geometry", IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','assvg_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "assvg"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_assvg("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_assvg"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_assvg"(IN "public"."geometry", IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','assvg_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_assvg"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for assvg("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "assvg"("public"."geometry") CASCADE;
CREATE FUNCTION "assvg"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','assvg_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "assvg"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_assvg("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_assvg"("public"."geometry") CASCADE;
CREATE FUNCTION "st_assvg"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','assvg_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_assvg"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_asgml(int4, "public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_asgml"(int4, "public"."geometry", int4, int4) CASCADE;
CREATE FUNCTION "_st_asgml"(IN int4, IN "public"."geometry", IN int4, IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_asGML'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_asgml"(IN int4, IN "public"."geometry", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for asgml("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "asgml"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "asgml"(IN "public"."geometry", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML(2, $1, $2, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "asgml"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_asgml"(IN "public"."geometry", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML(2, $1, $2, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for asgml("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "asgml"("public"."geometry") CASCADE;
CREATE FUNCTION "asgml"(IN "public"."geometry") RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML(2, $1, 15, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "asgml"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"("public"."geometry") CASCADE;
CREATE FUNCTION "st_asgml"(IN "public"."geometry") RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML(2, $1, 15, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml(int4, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"(int4, "public"."geometry") CASCADE;
CREATE FUNCTION "st_asgml"(IN int4, IN "public"."geometry") RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML($1, $2, 15, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN int4, IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml(int4, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"(int4, "public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_asgml"(IN int4, IN "public"."geometry", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML($1, $2, $3, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN int4, IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"("public"."geometry", int4, int4) CASCADE;
CREATE FUNCTION "st_asgml"(IN "public"."geometry", IN int4, IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML(2, $1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN "public"."geometry", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml(int4, "public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"(int4, "public"."geometry", int4, int4) CASCADE;
CREATE FUNCTION "st_asgml"(IN int4, IN "public"."geometry", IN int4, IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML($1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN int4, IN "public"."geometry", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_askml(int4, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_askml"(int4, "public"."geometry", int4) CASCADE;
CREATE FUNCTION "_st_askml"(IN int4, IN "public"."geometry", IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_asKML'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_askml"(IN int4, IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for askml("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "askml"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "askml"(IN "public"."geometry", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML(2, transform($1,4326), $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "askml"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_askml("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_askml"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_askml"(IN "public"."geometry", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML(2, ST_Transform($1,4326), $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_askml"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for askml("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "askml"("public"."geometry") CASCADE;
CREATE FUNCTION "askml"(IN "public"."geometry") RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML(2, transform($1,4326), 15)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "askml"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for askml(int4, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "askml"(int4, "public"."geometry", int4) CASCADE;
CREATE FUNCTION "askml"(IN int4, IN "public"."geometry", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML($1, transform($2,4326), $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "askml"(IN int4, IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_askml("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_askml"("public"."geometry") CASCADE;
CREATE FUNCTION "st_askml"(IN "public"."geometry") RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML(2, ST_Transform($1,4326), 15)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_askml"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_askml(int4, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_askml"(int4, "public"."geometry") CASCADE;
CREATE FUNCTION "st_askml"(IN int4, IN "public"."geometry") RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML($1, ST_Transform($2,4326), 15)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_askml"(IN int4, IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_askml(int4, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_askml"(int4, "public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_askml"(IN int4, IN "public"."geometry", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML($1, ST_Transform($2,4326), $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_askml"(IN int4, IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_asgeojson(int4, "public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_asgeojson"(int4, "public"."geometry", int4, int4) CASCADE;
CREATE FUNCTION "_st_asgeojson"(IN int4, IN "public"."geometry", IN int4, IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_asGeoJson'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_asgeojson"(IN int4, IN "public"."geometry", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_asgeojson"(IN "public"."geometry", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson(1, $1, $2, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"("public"."geometry") CASCADE;
CREATE FUNCTION "st_asgeojson"(IN "public"."geometry") RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson(1, $1, 15, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson(int4, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"(int4, "public"."geometry") CASCADE;
CREATE FUNCTION "st_asgeojson"(IN int4, IN "public"."geometry") RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson($1, $2, 15, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN int4, IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson(int4, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"(int4, "public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_asgeojson"(IN int4, IN "public"."geometry", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson($1, $2, $3, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN int4, IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"("public"."geometry", int4, int4) CASCADE;
CREATE FUNCTION "st_asgeojson"(IN "public"."geometry", IN int4, IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson(1, $1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN "public"."geometry", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson(int4, "public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"(int4, "public"."geometry", int4, int4) CASCADE;
CREATE FUNCTION "st_asgeojson"(IN int4, IN "public"."geometry", IN int4, IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson($1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN int4, IN "public"."geometry", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geohash("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geohash"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_geohash"(IN "public"."geometry", IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','ST_GeoHash'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geohash"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geohash("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geohash"("public"."geometry") CASCADE;
CREATE FUNCTION "st_geohash"(IN "public"."geometry") RETURNS "text" 
	AS $BODY$SELECT ST_GeoHash($1, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geohash"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for numpoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "numpoints"("public"."geometry") CASCADE;
CREATE FUNCTION "numpoints"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_numpoints_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "numpoints"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_numpoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_numpoints"("public"."geometry") CASCADE;
CREATE FUNCTION "st_numpoints"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_numpoints_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_numpoints"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for numgeometries("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "numgeometries"("public"."geometry") CASCADE;
CREATE FUNCTION "numgeometries"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_numgeometries_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "numgeometries"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_numgeometries("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_numgeometries"("public"."geometry") CASCADE;
CREATE FUNCTION "st_numgeometries"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_numgeometries_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_numgeometries"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometryn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geometryn"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "geometryn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_geometryn_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometryn"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometryn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometryn"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_geometryn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_geometryn_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometryn"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for dimension("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "dimension"("public"."geometry") CASCADE;
CREATE FUNCTION "dimension"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_dimension'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "dimension"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_dimension("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_dimension"("public"."geometry") CASCADE;
CREATE FUNCTION "st_dimension"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_dimension'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_dimension"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for exteriorring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "exteriorring"("public"."geometry") CASCADE;
CREATE FUNCTION "exteriorring"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_exteriorring_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "exteriorring"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_exteriorring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_exteriorring"("public"."geometry") CASCADE;
CREATE FUNCTION "st_exteriorring"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_exteriorring_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_exteriorring"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for numinteriorrings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "numinteriorrings"("public"."geometry") CASCADE;
CREATE FUNCTION "numinteriorrings"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_numinteriorrings_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "numinteriorrings"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_numinteriorrings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_numinteriorrings"("public"."geometry") CASCADE;
CREATE FUNCTION "st_numinteriorrings"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_numinteriorrings_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_numinteriorrings"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for numinteriorring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "numinteriorring"("public"."geometry") CASCADE;
CREATE FUNCTION "numinteriorring"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_numinteriorrings_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "numinteriorring"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_numinteriorring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_numinteriorring"("public"."geometry") CASCADE;
CREATE FUNCTION "st_numinteriorring"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_numinteriorrings_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_numinteriorring"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for interiorringn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "interiorringn"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "interiorringn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_interiorringn_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "interiorringn"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_interiorringn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_interiorringn"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_interiorringn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_interiorringn_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_interiorringn"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometrytype("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometrytype"("public"."geometry") CASCADE;
CREATE FUNCTION "geometrytype"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_getTYPE'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometrytype"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometrytype("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometrytype"("public"."geometry") CASCADE;
CREATE FUNCTION "st_geometrytype"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','geometry_geometrytype'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometrytype"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for pointn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "pointn"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "pointn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_pointn_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "pointn"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_pointn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_pointn"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_pointn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_pointn_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_pointn"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for x("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "x"("public"."geometry") CASCADE;
CREATE FUNCTION "x"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_x_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "x"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_x("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_x"("public"."geometry") CASCADE;
CREATE FUNCTION "st_x"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_x_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_x"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for y("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "y"("public"."geometry") CASCADE;
CREATE FUNCTION "y"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_y_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "y"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_y("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_y"("public"."geometry") CASCADE;
CREATE FUNCTION "st_y"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_y_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_y"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for z("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "z"("public"."geometry") CASCADE;
CREATE FUNCTION "z"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_z_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "z"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_z("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_z"("public"."geometry") CASCADE;
CREATE FUNCTION "st_z"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_z_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_z"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for m("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "m"("public"."geometry") CASCADE;
CREATE FUNCTION "m"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_m_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "m"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_m("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_m"("public"."geometry") CASCADE;
CREATE FUNCTION "st_m"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_m_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_m"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for startpoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "startpoint"("public"."geometry") CASCADE;
CREATE FUNCTION "startpoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_startpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "startpoint"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_startpoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_startpoint"("public"."geometry") CASCADE;
CREATE FUNCTION "st_startpoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_startpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_startpoint"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for endpoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "endpoint"("public"."geometry") CASCADE;
CREATE FUNCTION "endpoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_endpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "endpoint"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_endpoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_endpoint"("public"."geometry") CASCADE;
CREATE FUNCTION "st_endpoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_endpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_endpoint"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for isclosed("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "isclosed"("public"."geometry") CASCADE;
CREATE FUNCTION "isclosed"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_isclosed_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "isclosed"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_isclosed("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_isclosed"("public"."geometry") CASCADE;
CREATE FUNCTION "st_isclosed"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_isclosed_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_isclosed"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for isempty("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "isempty"("public"."geometry") CASCADE;
CREATE FUNCTION "isempty"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_isempty'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "isempty"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_isempty("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_isempty"("public"."geometry") CASCADE;
CREATE FUNCTION "st_isempty"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_isempty'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_isempty"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for srid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "srid"("public"."geometry") CASCADE;
CREATE FUNCTION "srid"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_getSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "srid"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_srid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_srid"("public"."geometry") CASCADE;
CREATE FUNCTION "st_srid"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-1.5','LWGEOM_getSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_srid"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for setsrid("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "setsrid"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "setsrid"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_setSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "setsrid"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_setsrid("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_setsrid"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_setsrid"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_setSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_setsrid"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for asbinary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "asbinary"("public"."geometry") CASCADE;
CREATE FUNCTION "asbinary"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-1.5','LWGEOM_asBinary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "asbinary"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asbinary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asbinary"("public"."geometry") CASCADE;
CREATE FUNCTION "st_asbinary"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-1.5','LWGEOM_asBinary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asbinary"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for asbinary("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "asbinary"("public"."geometry", text) CASCADE;
CREATE FUNCTION "asbinary"(IN "public"."geometry", IN text) RETURNS "bytea" 
	AS '$libdir/postgis-1.5','LWGEOM_asBinary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "asbinary"(IN "public"."geometry", IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asbinary("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asbinary"("public"."geometry", text) CASCADE;
CREATE FUNCTION "st_asbinary"(IN "public"."geometry", IN text) RETURNS "bytea" 
	AS '$libdir/postgis-1.5','LWGEOM_asBinary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asbinary"(IN "public"."geometry", IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for astext("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "astext"("public"."geometry") CASCADE;
CREATE FUNCTION "astext"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_asText'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "astext"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_astext("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_astext"("public"."geometry") CASCADE;
CREATE FUNCTION "st_astext"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-1.5','LWGEOM_asText'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_astext"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometryfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "geometryfromtext"(text) CASCADE;
CREATE FUNCTION "geometryfromtext"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometryfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometryfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometryfromtext"(text) CASCADE;
CREATE FUNCTION "st_geometryfromtext"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometryfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometryfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geometryfromtext"(text, int4) CASCADE;
CREATE FUNCTION "geometryfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometryfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geometryfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geometryfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_geometryfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geometryfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geomfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "geomfromtext"(text) CASCADE;
CREATE FUNCTION "geomfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT geometryfromtext($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geomfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomfromtext"(text) CASCADE;
CREATE FUNCTION "st_geomfromtext"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geomfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geomfromtext"(text, int4) CASCADE;
CREATE FUNCTION "geomfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT geometryfromtext($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geomfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_geomfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for pointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "pointfromtext"(text) CASCADE;
CREATE FUNCTION "pointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'POINT'
	THEN GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "pointfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_pointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_pointfromtext"(text) CASCADE;
CREATE FUNCTION "st_pointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_pointfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for pointfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "pointfromtext"(text, int4) CASCADE;
CREATE FUNCTION "pointfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'POINT'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "pointfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_pointfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_pointfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_pointfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_pointfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for linefromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "linefromtext"(text) CASCADE;
CREATE FUNCTION "linefromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'LINESTRING'
	THEN GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "linefromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_linefromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_linefromtext"(text) CASCADE;
CREATE FUNCTION "st_linefromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'LINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_linefromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for linefromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "linefromtext"(text, int4) CASCADE;
CREATE FUNCTION "linefromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'LINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "linefromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_linefromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_linefromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_linefromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'LINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_linefromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for linestringfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "linestringfromtext"(text) CASCADE;
CREATE FUNCTION "linestringfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT LineFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "linestringfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for linestringfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "linestringfromtext"(text, int4) CASCADE;
CREATE FUNCTION "linestringfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT LineFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "linestringfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for polyfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "polyfromtext"(text) CASCADE;
CREATE FUNCTION "polyfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'POLYGON'
	THEN GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "polyfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_polyfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_polyfromtext"(text) CASCADE;
CREATE FUNCTION "st_polyfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_polyfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for polyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "polyfromtext"(text, int4) CASCADE;
CREATE FUNCTION "polyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'POLYGON'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "polyfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_polyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_polyfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_polyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POLYGON'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_polyfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for polygonfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "polygonfromtext"(text, int4) CASCADE;
CREATE FUNCTION "polygonfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT PolyFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "polygonfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_polygonfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_polygonfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_polygonfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT PolyFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_polygonfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for polygonfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "polygonfromtext"(text) CASCADE;
CREATE FUNCTION "polygonfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT PolyFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "polygonfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_polygonfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_polygonfromtext"(text) CASCADE;
CREATE FUNCTION "st_polygonfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_PolyFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_polygonfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mlinefromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "mlinefromtext"(text, int4) CASCADE;
CREATE FUNCTION "mlinefromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mlinefromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mlinefromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mlinefromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_mlinefromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mlinefromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mlinefromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "mlinefromtext"(text) CASCADE;
CREATE FUNCTION "mlinefromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'MULTILINESTRING'
	THEN GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mlinefromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mlinefromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mlinefromtext"(text) CASCADE;
CREATE FUNCTION "st_mlinefromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mlinefromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multilinestringfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "multilinestringfromtext"(text) CASCADE;
CREATE FUNCTION "multilinestringfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MLineFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multilinestringfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_multilinestringfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_multilinestringfromtext"(text) CASCADE;
CREATE FUNCTION "st_multilinestringfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MLineFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_multilinestringfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multilinestringfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "multilinestringfromtext"(text, int4) CASCADE;
CREATE FUNCTION "multilinestringfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT MLineFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multilinestringfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_multilinestringfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_multilinestringfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_multilinestringfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT MLineFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_multilinestringfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mpointfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "mpointfromtext"(text, int4) CASCADE;
CREATE FUNCTION "mpointfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1,$2)) = 'MULTIPOINT'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mpointfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mpointfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mpointfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_mpointfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'MULTIPOINT'
	THEN GeomFromText($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mpointfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mpointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "mpointfromtext"(text) CASCADE;
CREATE FUNCTION "mpointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'MULTIPOINT'
	THEN GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mpointfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mpointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mpointfromtext"(text) CASCADE;
CREATE FUNCTION "st_mpointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mpointfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multipointfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "multipointfromtext"(text, int4) CASCADE;
CREATE FUNCTION "multipointfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT MPointFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multipointfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multipointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "multipointfromtext"(text) CASCADE;
CREATE FUNCTION "multipointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT MPointFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multipointfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_multipointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_multipointfromtext"(text) CASCADE;
CREATE FUNCTION "st_multipointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT MPointFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_multipointfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "mpolyfromtext"(text, int4) CASCADE;
CREATE FUNCTION "mpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mpolyfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mpolyfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_mpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mpolyfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mpolyfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "mpolyfromtext"(text) CASCADE;
CREATE FUNCTION "mpolyfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'MULTIPOLYGON'
	THEN GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mpolyfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mpolyfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mpolyfromtext"(text) CASCADE;
CREATE FUNCTION "st_mpolyfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mpolyfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multipolygonfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "multipolygonfromtext"(text, int4) CASCADE;
CREATE FUNCTION "multipolygonfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT MPolyFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multipolygonfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_multipolygonfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_multipolygonfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_multipolygonfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT MPolyFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_multipolygonfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multipolygonfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "multipolygonfromtext"(text) CASCADE;
CREATE FUNCTION "multipolygonfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT MPolyFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multipolygonfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_multipolygonfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_multipolygonfromtext"(text) CASCADE;
CREATE FUNCTION "st_multipolygonfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT MPolyFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_multipolygonfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geomcollfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geomcollfromtext"(text, int4) CASCADE;
CREATE FUNCTION "geomcollfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geomcollfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomcollfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomcollfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_geomcollfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomcollfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geomcollfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "geomcollfromtext"(text) CASCADE;
CREATE FUNCTION "geomcollfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geomcollfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomcollfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomcollfromtext"(text) CASCADE;
CREATE FUNCTION "st_geomcollfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomcollfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geomfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "geomfromwkb"(bytea) CASCADE;
CREATE FUNCTION "geomfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_WKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geomfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomfromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_geomfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_WKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geomfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geomfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "geomfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT setSRID(GeomFromWKB($1), $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geomfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_geomfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_SetSRID(ST_GeomFromWKB($1), $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for pointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "pointfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "pointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'POINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "pointfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_pointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_pointfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_pointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_pointfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for pointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "pointfromwkb"(bytea) CASCADE;
CREATE FUNCTION "pointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POINT'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "pointfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_pointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_pointfromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_pointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_pointfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for linefromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "linefromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "linefromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "linefromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_linefromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_linefromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_linefromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_linefromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for linefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "linefromwkb"(bytea) CASCADE;
CREATE FUNCTION "linefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'LINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "linefromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_linefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_linefromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_linefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_linefromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for linestringfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "linestringfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "linestringfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "linestringfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_linestringfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_linestringfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_linestringfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_linestringfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for linestringfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "linestringfromwkb"(bytea) CASCADE;
CREATE FUNCTION "linestringfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'LINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "linestringfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_linestringfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_linestringfromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_linestringfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'LINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_linestringfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for polyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "polyfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "polyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'POLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "polyfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_polyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_polyfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_polyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_polyfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for polyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "polyfromwkb"(bytea) CASCADE;
CREATE FUNCTION "polyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "polyfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_polyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_polyfromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_polyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_polyfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for polygonfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "polygonfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "polygonfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = 'POLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "polygonfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_polygonfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_polygonfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_polygonfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_polygonfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for polygonfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "polygonfromwkb"(bytea) CASCADE;
CREATE FUNCTION "polygonfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "polygonfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_polygonfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_polygonfromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_polygonfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_polygonfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mpointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "mpointfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "mpointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mpointfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mpointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mpointfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_mpointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTIPOINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mpointfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mpointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "mpointfromwkb"(bytea) CASCADE;
CREATE FUNCTION "mpointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOINT'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mpointfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mpointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mpointfromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_mpointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mpointfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multipointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "multipointfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "multipointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multipointfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_multipointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_multipointfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_multipointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_multipointfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multipointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "multipointfromwkb"(bytea) CASCADE;
CREATE FUNCTION "multipointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOINT'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multipointfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_multipointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_multipointfromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_multipointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_multipointfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multilinefromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "multilinefromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "multilinefromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multilinefromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multilinefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "multilinefromwkb"(bytea) CASCADE;
CREATE FUNCTION "multilinefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multilinefromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_multilinefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_multilinefromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_multilinefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_multilinefromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mlinefromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "mlinefromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "mlinefromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mlinefromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mlinefromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mlinefromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_mlinefromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mlinefromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mlinefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "mlinefromwkb"(bytea) CASCADE;
CREATE FUNCTION "mlinefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mlinefromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mlinefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mlinefromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_mlinefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mlinefromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mpolyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "mpolyfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "mpolyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mpolyfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mpolyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mpolyfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_mpolyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mpolyfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for mpolyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "mpolyfromwkb"(bytea) CASCADE;
CREATE FUNCTION "mpolyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "mpolyfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_mpolyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_mpolyfromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_mpolyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_mpolyfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multipolyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "multipolyfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "multipolyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multipolyfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_multipolyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_multipolyfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_multipolyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_multipolyfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for multipolyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "multipolyfromwkb"(bytea) CASCADE;
CREATE FUNCTION "multipolyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "multipolyfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_multipolyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_multipolyfromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_multipolyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_multipolyfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geomcollfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geomcollfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "geomcollfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geomcollfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomcollfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomcollfromwkb"(bytea, int4) CASCADE;
CREATE FUNCTION "st_geomcollfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomcollfromwkb"(IN bytea, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geomcollfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "geomcollfromwkb"(bytea) CASCADE;
CREATE FUNCTION "geomcollfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geomcollfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geomcollfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geomcollfromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_geomcollfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geomcollfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for max_distance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "max_distance"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "max_distance"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_maxdistance2d_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "max_distance"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_maxdistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_maxdistance"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_maxdistance"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_maxdistance2d_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_maxdistance"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_maxdistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_maxdistance"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_maxdistance"(IN "public"."geometry", IN "public"."geometry") RETURNS "float8" 
	AS $BODY$SELECT _ST_MaxDistance(ST_ConvexHull($1), ST_ConvexHull($2))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_maxdistance"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_closestpoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_closestpoint"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_closestpoint"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_closestpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_closestpoint"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_shortestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_shortestline"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_shortestline"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_shortestline2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_shortestline"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_longestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_longestline"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_longestline"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_longestline2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_longestline"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asbinary(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asbinary"(text) CASCADE;
CREATE FUNCTION "st_asbinary"(IN text) RETURNS "bytea" 
	AS $BODY$ SELECT ST_AsBinary($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asbinary"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_longestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_longestline"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_longestline"(IN "public"."geometry", IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$SELECT _ST_LongestLine(ST_ConvexHull($1), ST_ConvexHull($2))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_longestline"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_dfullywithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_dfullywithin"("public"."geometry", "public"."geometry", float8) CASCADE;
CREATE FUNCTION "_st_dfullywithin"(IN "public"."geometry", IN "public"."geometry", IN float8) RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_dfullywithin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_dfullywithin"(IN "public"."geometry", IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_dfullywithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_dfullywithin"("public"."geometry", "public"."geometry", float8) CASCADE;
CREATE FUNCTION "st_dfullywithin"(IN "public"."geometry", IN "public"."geometry", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DFullyWithin(ST_ConvexHull($1), ST_ConvexHull($2), $3)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_dfullywithin"(IN "public"."geometry", IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for bdpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "bdpolyfromtext"(text, int4) CASCADE;
CREATE FUNCTION "bdpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := BuildArea(mline);

	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;

	RETURN geom;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "bdpolyfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_bdpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_bdpolyfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_bdpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := ST_BuildArea(mline);

	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;

	RETURN geom;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_bdpolyfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for bdmpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "bdmpolyfromtext"(text, int4) CASCADE;
CREATE FUNCTION "bdmpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := multi(BuildArea(mline));

	RETURN geom;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "bdmpolyfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_bdmpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_bdmpolyfromtext"(text, int4) CASCADE;
CREATE FUNCTION "st_bdmpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := multi(ST_BuildArea(mline));

	RETURN geom;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_bdmpolyfromtext"(IN text, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for unlockrows(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "unlockrows"(text) CASCADE;
CREATE FUNCTION "unlockrows"(IN text) RETURNS "int4" 
	AS $BODY$ 
DECLARE
	ret int;
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table where authid = ' ||
		quote_literal($1);

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "unlockrows"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for lockrow(text, text, text, text, timestamp)
-- ----------------------------
DROP FUNCTION IF EXISTS "lockrow"(text, text, text, text, timestamp) CASCADE;
CREATE FUNCTION "lockrow"(IN text, IN text, IN text, IN text, IN timestamp) RETURNS "int4" 
	AS $BODY$ 
DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;
	
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table WHERE expires < now()'; 

	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;

	-- RAISE NOTICE 'toid: %', mytoid;

	FOR myrec IN SELECT * FROM authorization_table WHERE 
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;

	EXECUTE 'INSERT INTO authorization_table VALUES ('||
		quote_literal(mytoid::text)||','||quote_literal(myrid)||
		','||quote_literal(expires::text)||
		','||quote_literal(authid) ||')';

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "lockrow"(IN text, IN text, IN text, IN text, IN timestamp) OWNER TO "postgres";

-- ----------------------------
--  Function structure for lockrow(text, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "lockrow"(text, text, text, text) CASCADE;
CREATE FUNCTION "lockrow"(IN text, IN text, IN text, IN text) RETURNS "int4" 
	AS $BODY$ SELECT LockRow($1, $2, $3, $4, now()::timestamp+'1:00'); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "lockrow"(IN text, IN text, IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for lockrow(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "lockrow"(text, text, text) CASCADE;
CREATE FUNCTION "lockrow"(IN text, IN text, IN text) RETURNS "int4" 
	AS $BODY$ SELECT LockRow(current_schema(), $1, $2, $3, now()::timestamp+'1:00'); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "lockrow"(IN text, IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for lockrow(text, text, text, timestamp)
-- ----------------------------
DROP FUNCTION IF EXISTS "lockrow"(text, text, text, timestamp) CASCADE;
CREATE FUNCTION "lockrow"(IN text, IN text, IN text, IN timestamp) RETURNS "int4" 
	AS $BODY$ SELECT LockRow(current_schema(), $1, $2, $3, $4); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "lockrow"(IN text, IN text, IN text, IN timestamp) OWNER TO "postgres";

-- ----------------------------
--  Function structure for addauth(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "addauth"(text) CASCADE;
CREATE FUNCTION "addauth"(IN text) RETURNS "bool" 
	AS $BODY$ 
DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := 'f';
	FOR myrec IN SELECT * FROM pg_class WHERE relname = 'temp_lock_have_table' LOOP
		okay := 't';
	END LOOP; 
	IF (okay <> 't') THEN 
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;

	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE 'INSERT INTO temp_lock_have_table VALUES ( '||
--		quote_literal(getTransactionID()) || ',' ||
--		quote_literal(lockid) ||')';

	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);

	RETURN true::boolean;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "addauth"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for checkauth(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "checkauth"(text, text, text) CASCADE;
CREATE FUNCTION "checkauth"(IN text, IN text, IN text) RETURNS "int4" 
	AS $BODY$ 
DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	if ( $1 != '' ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;

	-- TODO: check for an already existing trigger ?

	EXECUTE 'CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON ' 
		|| quote_ident(schema) || '.' || quote_ident($2)
		||' FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger('
		|| quote_literal($3) || ')';

	RETURN 0;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "checkauth"(IN text, IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for checkauth(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "checkauth"(text, text) CASCADE;
CREATE FUNCTION "checkauth"(IN text, IN text) RETURNS "int4" 
	AS $BODY$ SELECT CheckAuth('', $1, $2) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "checkauth"(IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for gettransactionid()
-- ----------------------------
DROP FUNCTION IF EXISTS "gettransactionid"() CASCADE;
CREATE FUNCTION "gettransactionid"() RETURNS "xid" 
	AS '$libdir/postgis-1.5','getTransactionID'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "gettransactionid"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geogfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geogfromwkb"(bytea) CASCADE;
CREATE FUNCTION "st_geogfromwkb"(IN bytea) RETURNS "public"."geography" 
	AS '$libdir/postgis-1.5','geography_from_binary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geogfromwkb"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_typmod_dims(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_typmod_dims"(int4) CASCADE;
CREATE FUNCTION "geography_typmod_dims"(IN int4) RETURNS "int4" 
	AS '$libdir/postgis-1.5','geography_typmod_dims'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_typmod_dims"(IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for enablelongtransactions()
-- ----------------------------
DROP FUNCTION IF EXISTS "enablelongtransactions"() CASCADE;
CREATE FUNCTION "enablelongtransactions"() RETURNS "text" 
	AS $BODY$ 
DECLARE
	"query" text;
	exists bool;
	rec RECORD;

BEGIN

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists
	THEN
		"query" = 'CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)';
		EXECUTE "query";
	END IF;

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists THEN
		"query" = 'CREATE VIEW authorized_tables AS ' ||
			'SELECT ' ||
			'n.nspname as schema, ' ||
			'c.relname as table, trim(' ||
			quote_literal(chr(92) || '000') ||
			' from t.tgargs) as id_column ' ||
			'FROM pg_trigger t, pg_class c, pg_proc p ' ||
			', pg_namespace n ' ||
			'WHERE p.proname = ' || quote_literal('checkauthtrigger') ||
			' AND c.relnamespace = n.oid' ||
			' AND t.tgfoid = p.oid and t.tgrelid = c.oid';
		EXECUTE "query";
	END IF;

	RETURN 'Long transactions support enabled';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "enablelongtransactions"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for longtransactionsenabled()
-- ----------------------------
DROP FUNCTION IF EXISTS "longtransactionsenabled"() CASCADE;
CREATE FUNCTION "longtransactionsenabled"() RETURNS "bool" 
	AS $BODY$ 
DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		return 't';
	END LOOP;
	return 'f';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "longtransactionsenabled"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for disablelongtransactions()
-- ----------------------------
DROP FUNCTION IF EXISTS "disablelongtransactions"() CASCADE;
CREATE FUNCTION "disablelongtransactions"() RETURNS "text" 
	AS $BODY$ 
DECLARE
	rec RECORD;

BEGIN

	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = 'checkauthtrigger' and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE 'DROP TRIGGER ' || quote_ident(rec.tgname) ||
			' ON ' || quote_ident(rec.relname);
	END LOOP;

	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table' LOOP
		DROP TABLE authorization_table;
	END LOOP;

	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables' LOOP
		DROP VIEW authorized_tables;
	END LOOP;

	RETURN 'Long transactions support disabled';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "disablelongtransactions"() OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_wkttosql(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_wkttosql"(text) CASCADE;
CREATE FUNCTION "st_wkttosql"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_wkttosql"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_wkbtosql(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_wkbtosql"(bytea) CASCADE;
CREATE FUNCTION "st_wkbtosql"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_from_WKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_wkbtosql"(IN bytea) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_coorddim("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_coorddim"("public"."geometry") CASCADE;
CREATE FUNCTION "st_coorddim"(IN "public"."geometry") RETURNS "int2" 
	AS '$libdir/postgis-1.5','LWGEOM_ndims'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_coorddim"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_orderingequals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_orderingequals"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "_st_orderingequals"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_same'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_orderingequals"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_orderingequals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_orderingequals"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "st_orderingequals"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$ 
	SELECT $1 ~= $2 AND _ST_OrderingEquals($1, $2)
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_orderingequals"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for se_is3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "se_is3d"("public"."geometry") CASCADE;
CREATE FUNCTION "se_is3d"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_hasz'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "se_is3d"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for se_ismeasured("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "se_ismeasured"("public"."geometry") CASCADE;
CREATE FUNCTION "se_ismeasured"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_hasm'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "se_ismeasured"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_point(float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_point"(float8, float8) CASCADE;
CREATE FUNCTION "st_point"(IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_point"(IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for se_z("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "se_z"("public"."geometry") CASCADE;
CREATE FUNCTION "se_z"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_z_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "se_z"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for se_m("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "se_m"("public"."geometry") CASCADE;
CREATE FUNCTION "se_m"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-1.5','LWGEOM_m_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "se_m"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_polygon("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_polygon"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_polygon"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS $BODY$ 
	SELECT setSRID(makepolygon($1), $2)
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_polygon"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for se_envelopesintersect("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "se_envelopesintersect"("public"."geometry", "public"."geometry") CASCADE;
CREATE FUNCTION "se_envelopesintersect"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$ 
	SELECT $1 && $2
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "se_envelopesintersect"(IN "public"."geometry", IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for se_locatealong("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "se_locatealong"("public"."geometry", float8) CASCADE;
CREATE FUNCTION "se_locatealong"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$ SELECT locate_between_measures($1, $2, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "se_locatealong"(IN "public"."geometry", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for se_locatebetween("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "se_locatebetween"("public"."geometry", float8, float8) CASCADE;
CREATE FUNCTION "se_locatebetween"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_locate_between_m'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "se_locatebetween"(IN "public"."geometry", IN float8, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_typmod_in(_cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_typmod_in"(_cstring) CASCADE;
CREATE FUNCTION "geography_typmod_in"(IN _cstring) RETURNS "int4" 
	AS '$libdir/postgis-1.5','geography_typmod_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_typmod_in"(IN _cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_typmod_out(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_typmod_out"(int4) CASCADE;
CREATE FUNCTION "geography_typmod_out"(IN int4) RETURNS "cstring" 
	AS '$libdir/postgis-1.5','geography_typmod_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_typmod_out"(IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_in(cstring, oid, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_in"(cstring, oid, int4) CASCADE;
CREATE FUNCTION "geography_in"(IN cstring, IN oid, IN int4) RETURNS "public"."geography" 
	AS '$libdir/postgis-1.5','geography_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_in"(IN cstring, IN oid, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_out("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_out"("public"."geography") CASCADE;
CREATE FUNCTION "geography_out"(IN "public"."geography") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','geography_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_out"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_analyze(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_analyze"(internal) CASCADE;
CREATE FUNCTION "geography_analyze"(IN internal) RETURNS "bool" 
	AS '$libdir/postgis-1.5','geography_analyze'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geography_analyze"(IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for gidx_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "gidx_in"(cstring) CASCADE;
CREATE FUNCTION "gidx_in"(IN cstring) RETURNS "public"."gidx" 
	AS '$libdir/postgis-1.5','gidx_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "gidx_in"(IN cstring) OWNER TO "postgres";

-- ----------------------------
--  Function structure for gidx_out("public"."gidx")
-- ----------------------------
DROP FUNCTION IF EXISTS "gidx_out"("public"."gidx") CASCADE;
CREATE FUNCTION "gidx_out"(IN "public"."gidx") RETURNS "cstring" 
	AS '$libdir/postgis-1.5','gidx_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "gidx_out"(IN "public"."gidx") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography("public"."geography", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography"("public"."geography", int4, bool) CASCADE;
CREATE FUNCTION "geography"(IN "public"."geography", IN int4, IN bool) RETURNS "public"."geography" 
	AS '$libdir/postgis-1.5','geography_enforce_typmod'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography"(IN "public"."geography", IN int4, IN bool) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_astext("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_astext"("public"."geography") CASCADE;
CREATE FUNCTION "st_astext"(IN "public"."geography") RETURNS "text" 
	AS '$libdir/postgis-1.5','geography_as_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_astext"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_astext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_astext"(text) CASCADE;
CREATE FUNCTION "st_astext"(IN text) RETURNS "text" 
	AS $BODY$ SELECT ST_AsText($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_astext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geographyfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geographyfromtext"(text) CASCADE;
CREATE FUNCTION "st_geographyfromtext"(IN text) RETURNS "public"."geography" 
	AS '$libdir/postgis-1.5','geography_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geographyfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_geogfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_geogfromtext"(text) CASCADE;
CREATE FUNCTION "st_geogfromtext"(IN text) RETURNS "public"."geography" 
	AS '$libdir/postgis-1.5','geography_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_geogfromtext"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asbinary("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asbinary"("public"."geography") CASCADE;
CREATE FUNCTION "st_asbinary"(IN "public"."geography") RETURNS "bytea" 
	AS '$libdir/postgis-1.5','geography_as_binary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asbinary"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_typmod_srid(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_typmod_srid"(int4) CASCADE;
CREATE FUNCTION "geography_typmod_srid"(IN int4) RETURNS "int4" 
	AS '$libdir/postgis-1.5','geography_typmod_srid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_typmod_srid"(IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_typmod_type(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_typmod_type"(int4) CASCADE;
CREATE FUNCTION "geography_typmod_type"(IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','geography_typmod_type'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_typmod_type"(IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "geography"("public"."geometry") CASCADE;
CREATE FUNCTION "geography"(IN "public"."geometry") RETURNS "public"."geography" 
	AS '$libdir/postgis-1.5','geography_from_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geometry("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "geometry"("public"."geography") CASCADE;
CREATE FUNCTION "geometry"(IN "public"."geography") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','geometry_from_geography'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geometry"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_gist_consistent(internal, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_gist_consistent"(internal, "public"."geometry", int4) CASCADE;
CREATE FUNCTION "geography_gist_consistent"(IN internal, IN "public"."geometry", IN int4) RETURNS "bool" 
	AS '$libdir/postgis-1.5','geography_gist_consistent'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geography_gist_consistent"(IN internal, IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_gist_compress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_gist_compress"(internal) CASCADE;
CREATE FUNCTION "geography_gist_compress"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','geography_gist_compress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geography_gist_compress"(IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_gist_penalty(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_gist_penalty"(internal, internal, internal) CASCADE;
CREATE FUNCTION "geography_gist_penalty"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','geography_gist_penalty'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geography_gist_penalty"(IN internal, IN internal, IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_gist_picksplit(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_gist_picksplit"(internal, internal) CASCADE;
CREATE FUNCTION "geography_gist_picksplit"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','geography_gist_picksplit'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geography_gist_picksplit"(IN internal, IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_gist_union(bytea, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_gist_union"(bytea, internal) CASCADE;
CREATE FUNCTION "geography_gist_union"(IN bytea, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','geography_gist_union'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geography_gist_union"(IN bytea, IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_gist_same("public"."box2d", "public"."box2d", internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_gist_same"("public"."box2d", "public"."box2d", internal) CASCADE;
CREATE FUNCTION "geography_gist_same"(IN "public"."box2d", IN "public"."box2d", IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','geography_gist_same'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geography_gist_same"(IN "public"."box2d", IN "public"."box2d", IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_gist_decompress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_gist_decompress"(internal) CASCADE;
CREATE FUNCTION "geography_gist_decompress"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-1.5','geography_gist_decompress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geography_gist_decompress"(IN internal) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_gist_selectivity(internal, oid, internal, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_gist_selectivity"(internal, oid, internal, int4) CASCADE;
CREATE FUNCTION "geography_gist_selectivity"(IN internal, IN oid, IN internal, IN int4) RETURNS "float8" 
	AS '$libdir/postgis-1.5','geography_gist_selectivity'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geography_gist_selectivity"(IN internal, IN oid, IN internal, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_gist_join_selectivity(internal, oid, internal, int2)
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_gist_join_selectivity"(internal, oid, internal, int2) CASCADE;
CREATE FUNCTION "geography_gist_join_selectivity"(IN internal, IN oid, IN internal, IN int2) RETURNS "float8" 
	AS '$libdir/postgis-1.5','geography_gist_join_selectivity'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "geography_gist_join_selectivity"(IN internal, IN oid, IN internal, IN int2) OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_overlaps("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_overlaps"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "geography_overlaps"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-1.5','geography_overlaps'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_overlaps"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_lt("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_lt"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "geography_lt"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-1.5','geography_lt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_lt"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_le("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_le"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "geography_le"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-1.5','geography_le'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_le"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_gt("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_gt"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "geography_gt"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-1.5','geography_gt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_gt"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_ge("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_ge"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "geography_ge"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-1.5','geography_ge'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_ge"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_eq("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_eq"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "geography_eq"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-1.5','geography_eq'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_eq"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for geography_cmp("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "geography_cmp"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "geography_cmp"(IN "public"."geography", IN "public"."geography") RETURNS "int4" 
	AS '$libdir/postgis-1.5','geography_cmp'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "geography_cmp"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_assvg("public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_assvg"("public"."geography", int4, int4) CASCADE;
CREATE FUNCTION "st_assvg"(IN "public"."geography", IN int4, IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','geography_as_svg'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_assvg"(IN "public"."geography", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_assvg("public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_assvg"("public"."geography", int4) CASCADE;
CREATE FUNCTION "st_assvg"(IN "public"."geography", IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','geography_as_svg'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_assvg"(IN "public"."geography", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_assvg("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_assvg"("public"."geography") CASCADE;
CREATE FUNCTION "st_assvg"(IN "public"."geography") RETURNS "text" 
	AS '$libdir/postgis-1.5','geography_as_svg'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_assvg"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_assvg(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_assvg"(text) CASCADE;
CREATE FUNCTION "st_assvg"(IN text) RETURNS "text" 
	AS $BODY$ SELECT ST_AsSVG($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_assvg"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_asgml(int4, "public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_asgml"(int4, "public"."geography", int4, int4) CASCADE;
CREATE FUNCTION "_st_asgml"(IN int4, IN "public"."geography", IN int4, IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','geography_as_gml'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_asgml"(IN int4, IN "public"."geography", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml("public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"("public"."geography", int4) CASCADE;
CREATE FUNCTION "st_asgml"(IN "public"."geography", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML(2, $1, $2, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN "public"."geography", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"("public"."geography") CASCADE;
CREATE FUNCTION "st_asgml"(IN "public"."geography") RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML(2, $1, 15, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"(text) CASCADE;
CREATE FUNCTION "st_asgml"(IN text) RETURNS "text" 
	AS $BODY$ SELECT ST_AsGML($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml(int4, "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"(int4, "public"."geography") CASCADE;
CREATE FUNCTION "st_asgml"(IN int4, IN "public"."geography") RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML($1, $2, 15, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN int4, IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml(int4, "public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"(int4, "public"."geography", int4) CASCADE;
CREATE FUNCTION "st_asgml"(IN int4, IN "public"."geography", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML($1, $2, $3, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN int4, IN "public"."geography", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml("public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"("public"."geography", int4, int4) CASCADE;
CREATE FUNCTION "st_asgml"(IN "public"."geography", IN int4, IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML(2, $1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN "public"."geography", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgml(int4, "public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgml"(int4, "public"."geography", int4, int4) CASCADE;
CREATE FUNCTION "st_asgml"(IN int4, IN "public"."geography", IN int4, IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML($1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgml"(IN int4, IN "public"."geography", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_askml(int4, "public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_askml"(int4, "public"."geography", int4) CASCADE;
CREATE FUNCTION "_st_askml"(IN int4, IN "public"."geography", IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','geography_as_kml'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_askml"(IN int4, IN "public"."geography", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_askml("public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_askml"("public"."geography", int4) CASCADE;
CREATE FUNCTION "st_askml"(IN "public"."geography", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML(2, $1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_askml"(IN "public"."geography", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_askml("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_askml"("public"."geography") CASCADE;
CREATE FUNCTION "st_askml"(IN "public"."geography") RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML(2, $1, 15)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_askml"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_askml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_askml"(text) CASCADE;
CREATE FUNCTION "st_askml"(IN text) RETURNS "text" 
	AS $BODY$ SELECT ST_AsKML($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_askml"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_askml(int4, "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_askml"(int4, "public"."geography") CASCADE;
CREATE FUNCTION "st_askml"(IN int4, IN "public"."geography") RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML($1, $2, 15)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_askml"(IN int4, IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_askml(int4, "public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_askml"(int4, "public"."geography", int4) CASCADE;
CREATE FUNCTION "st_askml"(IN int4, IN "public"."geography", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML($1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_askml"(IN int4, IN "public"."geography", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_asgeojson(int4, "public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_asgeojson"(int4, "public"."geography", int4, int4) CASCADE;
CREATE FUNCTION "_st_asgeojson"(IN int4, IN "public"."geography", IN int4, IN int4) RETURNS "text" 
	AS '$libdir/postgis-1.5','geography_as_geojson'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_asgeojson"(IN int4, IN "public"."geography", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson("public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"("public"."geography", int4) CASCADE;
CREATE FUNCTION "st_asgeojson"(IN "public"."geography", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson(1, $1, $2, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN "public"."geography", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"("public"."geography") CASCADE;
CREATE FUNCTION "st_asgeojson"(IN "public"."geography") RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson(1, $1, 15, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"(text) CASCADE;
CREATE FUNCTION "st_asgeojson"(IN text) RETURNS "text" 
	AS $BODY$ SELECT ST_AsGeoJson($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson(int4, "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"(int4, "public"."geography") CASCADE;
CREATE FUNCTION "st_asgeojson"(IN int4, IN "public"."geography") RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson($1, $2, 15, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN int4, IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson(int4, "public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"(int4, "public"."geography", int4) CASCADE;
CREATE FUNCTION "st_asgeojson"(IN int4, IN "public"."geography", IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson($1, $2, $3, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN int4, IN "public"."geography", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson("public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"("public"."geography", int4, int4) CASCADE;
CREATE FUNCTION "st_asgeojson"(IN "public"."geography", IN int4, IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson(1, $1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN "public"."geography", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_asgeojson(int4, "public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_asgeojson"(int4, "public"."geography", int4, int4) CASCADE;
CREATE FUNCTION "st_asgeojson"(IN int4, IN "public"."geography", IN int4, IN int4) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGeoJson($1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_asgeojson"(IN int4, IN "public"."geography", IN int4, IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_distance("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_distance"("public"."geography", "public"."geography", float8, bool) CASCADE;
CREATE FUNCTION "_st_distance"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "float8" 
	AS '$libdir/postgis-1.5','geography_distance'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_distance"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_dwithin("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_dwithin"("public"."geography", "public"."geography", float8, bool) CASCADE;
CREATE FUNCTION "_st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "bool" 
	AS '$libdir/postgis-1.5','geography_dwithin'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_distance("public"."geography", "public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_distance"("public"."geography", "public"."geography", bool) CASCADE;
CREATE FUNCTION "st_distance"(IN "public"."geography", IN "public"."geography", IN bool) RETURNS "float8" 
	AS $BODY$SELECT _ST_Distance($1, $2, 0.0, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_distance"(IN "public"."geography", IN "public"."geography", IN bool) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_distance("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_distance"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "st_distance"(IN "public"."geography", IN "public"."geography") RETURNS "float8" 
	AS $BODY$SELECT _ST_Distance($1, $2, 0.0, true)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_distance"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_distance(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_distance"(text, text) CASCADE;
CREATE FUNCTION "st_distance"(IN text, IN text) RETURNS "float8" 
	AS $BODY$ SELECT ST_Distance($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_distance"(IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_expand("public"."geography", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_expand"("public"."geography", float8) CASCADE;
CREATE FUNCTION "_st_expand"(IN "public"."geography", IN float8) RETURNS "public"."geography" 
	AS '$libdir/postgis-1.5','geography_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_expand"(IN "public"."geography", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_dwithin("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_dwithin"("public"."geography", "public"."geography", float8, bool) CASCADE;
CREATE FUNCTION "st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "bool" 
	AS $BODY$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_dwithin("public"."geography", "public"."geography", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_dwithin"("public"."geography", "public"."geography", float8) CASCADE;
CREATE FUNCTION "st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, true)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_dwithin(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_dwithin"(text, text, float8) CASCADE;
CREATE FUNCTION "st_dwithin"(IN text, IN text, IN float8) RETURNS "bool" 
	AS $BODY$ SELECT ST_DWithin($1::geometry, $2::geometry, $3);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_dwithin"(IN text, IN text, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_area("public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_area"("public"."geography", bool) CASCADE;
CREATE FUNCTION "st_area"(IN "public"."geography", IN bool) RETURNS "float8" 
	AS '$libdir/postgis-1.5','geography_area'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_area"(IN "public"."geography", IN bool) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_area("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_area"("public"."geography") CASCADE;
CREATE FUNCTION "st_area"(IN "public"."geography") RETURNS "float8" 
	AS $BODY$SELECT ST_Area($1, true)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_area"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_area(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_area"(text) CASCADE;
CREATE FUNCTION "st_area"(IN text) RETURNS "float8" 
	AS $BODY$ SELECT ST_Area($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_area"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_length("public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_length"("public"."geography", bool) CASCADE;
CREATE FUNCTION "st_length"(IN "public"."geography", IN bool) RETURNS "float8" 
	AS '$libdir/postgis-1.5','geography_length'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_length"(IN "public"."geography", IN bool) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_length("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_length"("public"."geography") CASCADE;
CREATE FUNCTION "st_length"(IN "public"."geography") RETURNS "float8" 
	AS $BODY$SELECT ST_Length($1, true)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_length"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_length(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_length"(text) CASCADE;
CREATE FUNCTION "st_length"(IN text) RETURNS "float8" 
	AS $BODY$ SELECT ST_Length($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_length"(IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_pointoutside("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_pointoutside"("public"."geography") CASCADE;
CREATE FUNCTION "_st_pointoutside"(IN "public"."geography") RETURNS "public"."geography" 
	AS '$libdir/postgis-1.5','geography_point_outside'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_pointoutside"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_covers("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_covers"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "_st_covers"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-1.5','geography_covers'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_covers"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_covers("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_covers"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "st_covers"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Covers($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_covers"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_covers(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_covers"(text, text) CASCADE;
CREATE FUNCTION "st_covers"(IN text, IN text) RETURNS "bool" 
	AS $BODY$ SELECT ST_Covers($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_covers"(IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_coveredby("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_coveredby"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "st_coveredby"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Covers($2, $1)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_coveredby"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_coveredby(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_coveredby"(text, text) CASCADE;
CREATE FUNCTION "st_coveredby"(IN text, IN text) RETURNS "bool" 
	AS $BODY$ SELECT ST_CoveredBy($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_coveredby"(IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_intersects("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_intersects"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "st_intersects"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Distance($1, $2, 0.0, false) < 0.00001$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_intersects"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_intersects(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_intersects"(text, text) CASCADE;
CREATE FUNCTION "st_intersects"(IN text, IN text) RETURNS "bool" 
	AS $BODY$ SELECT ST_Intersects($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_intersects"(IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_bestsrid("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_bestsrid"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "_st_bestsrid"(IN "public"."geography", IN "public"."geography") RETURNS "int4" 
	AS '$libdir/postgis-1.5','geography_bestsrid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_bestsrid"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for _st_bestsrid("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "_st_bestsrid"("public"."geography") CASCADE;
CREATE FUNCTION "_st_bestsrid"(IN "public"."geography") RETURNS "int4" 
	AS $BODY$SELECT _ST_BestSRID($1,$1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "_st_bestsrid"(IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_buffer("public"."geography", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_buffer"("public"."geography", float8) CASCADE;
CREATE FUNCTION "st_buffer"(IN "public"."geography", IN float8) RETURNS "public"."geography" 
	AS $BODY$SELECT geography(ST_Transform(ST_Buffer(ST_Transform(geometry($1), _ST_BestSRID($1)), $2), 4326))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_buffer"(IN "public"."geography", IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_buffer(text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_buffer"(text, float8) CASCADE;
CREATE FUNCTION "st_buffer"(IN text, IN float8) RETURNS "public"."geometry" 
	AS $BODY$ SELECT ST_Buffer($1::geometry, $2);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_buffer"(IN text, IN float8) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_intersection("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_intersection"("public"."geography", "public"."geography") CASCADE;
CREATE FUNCTION "st_intersection"(IN "public"."geography", IN "public"."geography") RETURNS "public"."geography" 
	AS $BODY$SELECT geography(ST_Transform(ST_Intersection(ST_Transform(geometry($1), _ST_BestSRID($1, $2)), ST_Transform(geometry($2), _ST_BestSRID($1, $2))), 4326))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_intersection"(IN "public"."geography", IN "public"."geography") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_intersection(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_intersection"(text, text) CASCADE;
CREATE FUNCTION "st_intersection"(IN text, IN text) RETURNS "public"."geometry" 
	AS $BODY$ SELECT ST_Intersection($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_intersection"(IN text, IN text) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_curvetoline("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_curvetoline"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_curvetoline"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_curve_segmentize'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_curvetoline"(IN "public"."geometry", IN int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_curvetoline("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_curvetoline"("public"."geometry") CASCADE;
CREATE FUNCTION "st_curvetoline"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_CurveToLine($1, 32)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_curvetoline"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_hasarc("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_hasarc"("public"."geometry") CASCADE;
CREATE FUNCTION "st_hasarc"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-1.5','LWGEOM_has_arc'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_hasarc"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_linetocurve("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_linetocurve"("public"."geometry") CASCADE;
CREATE FUNCTION "st_linetocurve"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-1.5','LWGEOM_line_desegmentize'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_linetocurve"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_minimumboundingcircle("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "st_minimumboundingcircle"("public"."geometry", int4) CASCADE;
CREATE FUNCTION "st_minimumboundingcircle"(IN inputgeom "public"."geometry", IN segs_per_quarter int4) RETURNS "public"."geometry" 
	AS $BODY$
	DECLARE
	hull GEOMETRY;
	ring GEOMETRY;
	center GEOMETRY;
	radius DOUBLE PRECISION;
	dist DOUBLE PRECISION;
	d DOUBLE PRECISION;
	idx1 integer;
	idx2 integer;
	l1 GEOMETRY;
	l2 GEOMETRY;
	p1 GEOMETRY;
	p2 GEOMETRY;
	a1 DOUBLE PRECISION;
	a2 DOUBLE PRECISION;


	BEGIN

	-- First compute the ConvexHull of the geometry
	hull = ST_ConvexHull(inputgeom);
	--A point really has no MBC
	IF ST_GeometryType(hull) = 'ST_Point' THEN
		RETURN hull;
	END IF;
	-- convert the hull perimeter to a linestring so we can manipulate individual points
	--If its already a linestring force it to a closed linestring
	ring = CASE WHEN ST_GeometryType(hull) = 'ST_LineString' THEN ST_AddPoint(hull, ST_StartPoint(hull)) ELSE ST_ExteriorRing(hull) END;

	dist = 0;
	-- Brute Force - check every pair
	FOR i in 1 .. (ST_NumPoints(ring)-2)
		LOOP
			FOR j in i .. (ST_NumPoints(ring)-1)
				LOOP
				d = ST_Distance(ST_PointN(ring,i),ST_PointN(ring,j));
				-- Check the distance and update if larger
				IF (d > dist) THEN
					dist = d;
					idx1 = i;
					idx2 = j;
				END IF;
			END LOOP;
		END LOOP;

	-- We now have the diameter of the convex hull.  The following line returns it if desired.
	-- RETURN MakeLine(PointN(ring,idx1),PointN(ring,idx2));

	-- Now for the Minimum Bounding Circle.  Since we know the two points furthest from each
	-- other, the MBC must go through those two points. Start with those points as a diameter of a circle.

	-- The radius is half the distance between them and the center is midway between them
	radius = ST_Distance(ST_PointN(ring,idx1),ST_PointN(ring,idx2)) / 2.0;
	center = ST_Line_interpolate_point(ST_MakeLine(ST_PointN(ring,idx1),ST_PointN(ring,idx2)),0.5);

	-- Loop through each vertex and check if the distance from the center to the point
	-- is greater than the current radius.
	FOR k in 1 .. (ST_NumPoints(ring)-1)
		LOOP
		IF(k <> idx1 and k <> idx2) THEN
			dist = ST_Distance(center,ST_PointN(ring,k));
			IF (dist > radius) THEN
				-- We have to expand the circle.  The new circle must pass trhough
				-- three points - the two original diameters and this point.

				-- Draw a line from the first diameter to this point
				l1 = ST_Makeline(ST_PointN(ring,idx1),ST_PointN(ring,k));
				-- Compute the midpoint
				p1 = ST_line_interpolate_point(l1,0.5);
				-- Rotate the line 90 degrees around the midpoint (perpendicular bisector)
				l1 = ST_Translate(ST_Rotate(ST_Translate(l1,-X(p1),-Y(p1)),pi()/2),X(p1),Y(p1));
				--  Compute the azimuth of the bisector
				a1 = ST_Azimuth(ST_PointN(l1,1),ST_PointN(l1,2));
				--  Extend the line in each direction the new computed distance to insure they will intersect
				l1 = ST_AddPoint(l1,ST_Makepoint(X(ST_PointN(l1,2))+sin(a1)*dist,Y(ST_PointN(l1,2))+cos(a1)*dist),-1);
				l1 = ST_AddPoint(l1,ST_Makepoint(X(ST_PointN(l1,1))-sin(a1)*dist,Y(ST_PointN(l1,1))-cos(a1)*dist),0);

				-- Repeat for the line from the point to the other diameter point
				l2 = ST_Makeline(ST_PointN(ring,idx2),ST_PointN(ring,k));
				p2 = ST_Line_interpolate_point(l2,0.5);
				l2 = ST_Translate(ST_Rotate(ST_Translate(l2,-X(p2),-Y(p2)),pi()/2),X(p2),Y(p2));
				a2 = ST_Azimuth(ST_PointN(l2,1),ST_PointN(l2,2));
				l2 = ST_AddPoint(l2,ST_Makepoint(X(ST_PointN(l2,2))+sin(a2)*dist,Y(ST_PointN(l2,2))+cos(a2)*dist),-1);
				l2 = ST_AddPoint(l2,ST_Makepoint(X(ST_PointN(l2,1))-sin(a2)*dist,Y(ST_PointN(l2,1))-cos(a2)*dist),0);

				-- The new center is the intersection of the two bisectors
				center = ST_Intersection(l1,l2);
				-- The new radius is the distance to any of the three points
				radius = ST_Distance(center,ST_PointN(ring,idx1));
			END IF;
		END IF;
		END LOOP;
	--DONE!!  Return the MBC via the buffer command
	RETURN ST_Buffer(center,radius,segs_per_quarter);

	END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_minimumboundingcircle"(IN inputgeom "public"."geometry", IN segs_per_quarter int4) OWNER TO "postgres";

-- ----------------------------
--  Function structure for st_minimumboundingcircle("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "st_minimumboundingcircle"("public"."geometry") CASCADE;
CREATE FUNCTION "st_minimumboundingcircle"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MinimumBoundingCircle($1, 48)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "st_minimumboundingcircle"(IN "public"."geometry") OWNER TO "postgres";

-- ----------------------------
--  Primary key structure for table "bicycletype"
-- ----------------------------
ALTER TABLE "bicycletype" ADD CONSTRAINT "bicycletype_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "cyclewaytype"
-- ----------------------------
ALTER TABLE "cyclewaytype" ADD CONSTRAINT "cyclewaytype_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "foottype"
-- ----------------------------
ALTER TABLE "foottype" ADD CONSTRAINT "foottype_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "highwaytype"
-- ----------------------------
ALTER TABLE "highwaytype" ADD CONSTRAINT "highwaytype_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "osmedge"
-- ----------------------------
ALTER TABLE "osmedge" ADD CONSTRAINT "osmedge_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "osmnode"
-- ----------------------------
ALTER TABLE "osmnode" ADD CONSTRAINT "osmnode_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "respondent"
-- ----------------------------
ALTER TABLE "respondent" ADD CONSTRAINT "respondent_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "resultmetadata"
-- ----------------------------
ALTER TABLE "resultmetadata" ADD CONSTRAINT "resultmetadata_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "resultnodechoice"
-- ----------------------------
ALTER TABLE "resultnodechoice" ADD CONSTRAINT "resultnodechoice_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "resultroute"
-- ----------------------------
ALTER TABLE "resultroute" ADD CONSTRAINT "resultroute_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "segregatedtype"
-- ----------------------------
ALTER TABLE "segregatedtype" ADD CONSTRAINT "segregatedtype_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "shortestpathlength"
-- ----------------------------
ALTER TABLE "shortestpathlength" ADD CONSTRAINT "shortestpathlength_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Indexes structure for table "shortestpathlength"
-- ----------------------------
CREATE INDEX "idx_fromnode" ON "shortestpathlength" USING btree(fromnode ASC NULLS LAST);
CREATE INDEX "idx_tonode" ON "shortestpathlength" USING btree(tonode ASC NULLS LAST);

-- ----------------------------
--  Primary key structure for table "sourcepoint"
-- ----------------------------
ALTER TABLE "sourcepoint" ADD CONSTRAINT "sourcepoint_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "sourceroute"
-- ----------------------------
ALTER TABLE "sourceroute" ADD CONSTRAINT "sourceroute_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table "trafficlight"
-- ----------------------------
ALTER TABLE "trafficlight" ADD CONSTRAINT "trafficlight_pkey" PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

